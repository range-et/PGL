{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;AAQA,oBAAoB;AACpB,eAAe,mBAAmB,CAAC,CAAC,EAAE,UAAU,EAAE;IAChD,MAAM,OAAO,GAAG,CAAC,CAAC,aAAa,EAAE,AAAC;IAClC,UAAU;IACV,MAAM,OAAO,GAAG,IAAI,GAAG,EAAE,AAAC;IAC1B,MAAM,OAAO,GAAG,IAAI,GAAG,EAAE,AAAC;IAC1B,IAAI,EAAE,EAAE,EAAE,AAAC;IACX,KAAK,MAAM,IAAI,IAAI,OAAO,CAAC,IAAI,EAAE,CAAE;QACjC,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC;QACzB,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC;QACzB,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QACtB,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;KACvB;IACD,mBAAmB;IACnB,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,CAAE;QACnC,iCAAiC;QACjC,KAAK,MAAM,IAAI,IAAI,OAAO,CAAC,IAAI,EAAE,CAAE;YACjC,yCAAyC;YACzC,mBAAmB;YACnB,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,AAAC;YACrC,qBAAqB;YACrB,MAAM,GAAG,GAAG,EAAE,AAAC;YACf,qBAAqB;YACrB,MAAM,GAAG,GAAG,EAAE,AAAC;YACf,8CAA8C;YAC9C,UAAU,CAAC,OAAO,CAAC,CAAC,GAAG,GAAK;gBAC1B,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,AAAC;gBACjC,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,AAAC;gBACjC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAClB,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aACnB,CAAC,CAAC;YACH,6BAA6B;YAC7B,MAAM,UAAU,GAAG,CAAA,GAAA,uBAAgB,CAAA,CAAC,GAAG,CAAC,AAAC;YACzC,MAAM,UAAU,GAAG,CAAA,GAAA,uBAAgB,CAAA,CAAC,GAAG,CAAC,AAAC;YAEzC,wCAAwC;YACxC,MAAM,GAAG,GAAG,EAAE,AAAC;YACf,MAAM,GAAG,GAAG,EAAE,AAAC;YACf,wBAAwB;YACxB,KAAK,MAAM,SAAS,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,CACpC,0CAA0C;YAC1C,IAAI,SAAS,IAAI,IAAI,EAAE;gBACrB,6BAA6B;gBAC7B,MAAM,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,AAAC;gBAC7D,MAAM,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,AAAC;gBAC7D,+BAA+B;gBAC/B,6BAA6B;gBAC7B,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBACpB,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aACrB;YAEH,8BAA8B;YAC9B,MAAM,MAAM,GAAG,CAAC,AAAC;YACjB,MAAM,WAAW,GAAG,AAAC,MAAM,GAAG,CAAC,GAAK,CAAA,CAAA,GAAA,uBAAgB,CAAA,CAAC,GAAG,CAAC,GAAC,CAAA,GAAA,uBAAgB,CAAA,CAAC,GAAG,CAAC,CAAA,AAAC,AAAC;YACjF,MAAM,WAAW,GAAG,AAAC,MAAM,GAAG,CAAC,GAAK,CAAA,CAAA,GAAA,uBAAgB,CAAA,CAAC,GAAG,CAAC,GAAC,CAAA,GAAA,uBAAgB,CAAA,CAAC,GAAG,CAAC,CAAA,AAAC,AAAC;YAEjF,8CAA8C;YAC9C,6BAA6B;YAC7B,MAAM,MAAM,GAAG,CAAC,AAAC;YACjB,MAAM,sBAAsB,GAAG,MAAM,GAAI,CAAA,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA,AAAC,AAAC;YACzE,MAAM,sBAAsB,GAAG,MAAM,GAAI,CAAA,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA,AAAC,AAAC;YAEzE,qDAAqD;YACrD,MAAM,QAAQ,GAAG,WAAW,GAAG,sBAAsB,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,AAAC;YAC1E,MAAM,QAAQ,GAAG,WAAW,GAAG,sBAAsB,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,AAAC;YAE1E,0BAA0B;YAC1B,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YAC5B,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;SAC7B;QACD,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACrB,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;KACtB;IACD,sBAAsB;IACtB,IAAI,MAAM,GAAG,IAAI,GAAG,EAAE,AAAC;IACvB,KAAK,MAAM,CAAC,IAAI,OAAO,CAAC,IAAI,EAAE,CAC5B,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAA,GAAA,YAAK,CAAA,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAE9D,sBAAsB;IACtB,kBAAkB;IAClB,sBAAsB;IACtB,MAAM,KAAK,GAAG,EAAE,AAAC;IACjB,MAAM,KAAK,GAAG,EAAE,AAAC;IACjB,MAAM,KAAK,GAAG,EAAE,AAAC;IACjB,IAAI,YAAY,AAAC;IACjB,KAAK,MAAM,EAAC,IAAI,MAAM,CAAC,IAAI,EAAE,CAAE;QAC7B,YAAY,GAAG,MAAM,CAAC,GAAG,CAAC,EAAC,CAAC,CAAC;QAC7B,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAC3B,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAC3B,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;KAC5B;IAED,MAAM,cAAc,GAAG,CAAA,GAAA,uBAAgB,CAAA,CAAC,KAAK,CAAC,AAAC;IAC/C,MAAM,cAAc,GAAG,CAAA,GAAA,uBAAgB,CAAA,CAAC,KAAK,CAAC,AAAC;IAC/C,MAAM,cAAc,GAAG,CAAA,GAAA,uBAAgB,CAAA,CAAC,KAAK,CAAC,AAAC;IAC/C,MAAM,iBAAiB,GAAG,IAAI,CAAA,GAAA,YAAK,CAAA,CACjC,CAAC,cAAc,EACf,CAAC,cAAc,EACf,CAAC,cAAc,CAChB,AAAC;IAEF,MAAM,GAAG,QAAQ,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC;IAE7C,CAAC,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;IAC7B,MAAM,IAAI,GAAG,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,AAAC;IACjC,MAAM,OAAO,GAAG,MAAM,gBAAgB,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,AAAC;IACpD,OAAO;QAAE,IAAI,EAAE,MAAM;QAAE,IAAI,EAAE,OAAO,CAAC,IAAI;KAAE,CAAC;CAC7C;AAED,yCAAyC;AACzC,SAAS,0BAA0B,CAAC,CAAC,EAAC;IACpC,MAAM,OAAO,GAAG,CAAC,CAAC,aAAa,EAAE,AAAC;IAClC,MAAM,OAAO,GAAG,IAAI,GAAG,EAAE,AAAC;IAC1B,MAAM,OAAO,GAAG,IAAI,GAAG,EAAE,AAAC;IAC1B,KAAK,MAAM,IAAI,IAAI,OAAO,CAAC,IAAI,EAAE,CAAE;QACjC,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC;QACvC,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC;KACxC;IACD,IAAI,MAAM,GAAG,IAAI,GAAG,EAAE,AAAC;IACvB,KAAK,MAAM,CAAC,IAAI,OAAO,CAAC,IAAI,EAAE,CAC5B,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAA,GAAA,YAAK,CAAA,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAE9D,CAAC,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;IAC7B,MAAM,IAAI,GAAG,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,AAAC;IACjC,OAAO;QAAE,IAAI,EAAE,MAAM;QAAE,IAAI,EAAE,IAAI;KAAE,CAAC;CACrC;AAED,wEAAwE;AACxE,SAAS,aAAa,CAAC,CAAC,EAAE,WAAW,EAAE;IACrC,yBAAyB;IACzB,MAAM,OAAO,GAAG,IAAI,GAAG,EAAE,AAAC;IAC1B,KAAK,MAAM,GAAG,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,CAAE;QAChC,MAAM,IAAI,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,AAAC;QAC9B,oBAAoB;QACpB,MAAM,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,AAAC;QAC/C,MAAM,GAAG,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,AAAC;QAC3C,MAAM,IAAI,GAAG,CAAA,GAAA,mCAA4B,CAAA,CAAC,KAAK,EAAE,GAAG,EAAE,WAAW,CAAC,AAAC;QACnE,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;KACxB;IACD,OAAO,OAAO,CAAC;CAChB;AAED,sDAAsD;AACtD,SAAS,mBAAmB,CAAC,CAAC,EAAE,WAAW,EAAC;IAC1C,IAAI,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,AAAC;IAC3B,KAAK,MAAM,GAAG,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,CAAE;QAChC,IAAI,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACxB,oBAAoB;QACpB,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;QACzC,GAAG,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;QACrC,IAAI,GAAG,CAAA,GAAA,mCAA4B,CAAA,CAAC,KAAK,EAAE,GAAG,EAAE,WAAW,CAAC,CAAC;QAC7D,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;KACxB;CACF;AAED,8DAA8D;AAC9D,SAAS,mBAAmB,CAAC,CAAC,EAAE,IAAI,EAAC;IACnC,IAAI,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,AAAC;IAC3B,KAAK,MAAM,GAAG,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,CAAE;QAChC,IAAI,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACxB,oBAAoB;QACpB,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;QACzC,GAAG,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;QACrC,IAAI,GAAG,CAAA,GAAA,oCAA6B,CAAA,CAAC,KAAK,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;QACvD,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;KACxB;CACF;AAED,uCAAuC;AACvC,eAAe,gBAAgB,CAAC,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE;IAC7D,MAAM,WAAW,GAAG,OAAO,AAAC;IAC5B,2CAA2C;IAC3C,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,CACjC,kCAAkC;IAClC,KAAK,MAAM,GAAG,IAAI,WAAW,CAAC,IAAI,EAAE,CAAE;QACpC,6CAA6C;QAC7C,MAAM,IAAI,GAAG,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,AAAC;QAC7C,gFAAgF;QAChF,IAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,EAAE,EAAE,CAAE;YAClD,+CAA+C;YAC/C,MAAM,GAAG,GAAG,EAAE,AAAC;YACf,MAAM,GAAG,GAAG,EAAE,AAAC;YACf,MAAM,GAAG,GAAG,EAAE,AAAC;YACf,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,AAAC;YAC5B,2CAA2C;YAC3C,KAAK,MAAM,QAAQ,IAAI,WAAW,CAAC,IAAI,EAAE,CACvC,IAAI,QAAQ,IAAI,GAAG,EAAE;gBACnB,0BAA0B;gBAC1B,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,KAAK,AAAC;gBACvD,IAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,SAAS,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,GAAG,EAAE,CAAE;oBAC1D,MAAM,UAAU,GAAG,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,AAAC;oBACzC,MAAM,CAAC,GAAG,CAAA,GAAA,+BAAwB,CAAA,CAAC,GAAG,EAAE,UAAU,CAAC,AAAC;oBACpD,IAAI,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE;wBAC9B,MAAM,GAAG,GAAG,UAAU,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,AAAC;wBACjC,MAAM,GAAG,GAAG,UAAU,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,AAAC;wBACjC,MAAM,GAAG,GAAG,UAAU,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,AAAC;wBACjC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACd,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBACd,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;qBACf;iBACF;aACF;YAEH,uCAAuC;YACvC,MAAM,IAAI,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,GAAI,CAAA,CAAA,GAAA,uBAAgB,CAAA,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA,AAAC,AAAC;YACxD,MAAM,IAAI,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,GAAI,CAAA,CAAA,GAAA,uBAAgB,CAAA,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA,AAAC,AAAC;YACxD,MAAM,IAAI,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,GAAI,CAAA,CAAA,GAAA,uBAAgB,CAAA,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA,AAAC,AAAC;YACxD,MAAM,QAAQ,GAAG,IAAI,CAAA,GAAA,YAAK,CAAA,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,AAAC;YAC7C,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC;SAC5B;KACF;IAEH,wBAAwB;IACxB,OAAO;QAAE,IAAI,EAAE,WAAW;KAAE,CAAC;CAC9B;AAED,wBAAwB;AACxB,SAAS,eAAe,CAAC,OAAO,EAAE,YAAY,EAAE;IAC9C,KAAK,MAAM,GAAG,IAAI,OAAO,CAAC,IAAI,EAAE,CAAE;QAChC,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,AAAC;QAC9B,iCAAiC;QACjC,IAAI,GAAG,EAAE,OAAO,AAAC;QACjB,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,CAAE;YACtD,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAChC,OAAO,GAAG,YAAY,GAAC,IAAI,CAAC,GAAG,CAAC,AAAC,IAAI,CAAC,EAAE,GAAG,CAAC,GAAG,CAAA,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,GAAC,CAAC,CAAA,AAAC,CAAC,CAAC;YACjF,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC;SACzB;KACF;CACF;AAED,sCAAsC;AACtC,SAAS,gBAAgB,CAAC,OAAO,EAAE,SAAS,EAAE,YAAY,EAAC;IACzD,IAAI,GAAG,GAAG,CAAC,AAAC;IACZ,IAAI,KAAK,EAAE,aAAa,AAAC;IACzB,mDAAmD;IACnD,KAAI,MAAM,IAAI,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;QACjC,KAAK,GAAG,IAAI,CAAC,YAAY,GAAC,SAAS,CAAC,CAAC;QACrC,IAAG,KAAK,IAAI,GAAG,EACb,GAAG,GAAG,KAAK,CAAC;KAEf;IACD,iDAAiD;IACjD,KAAI,MAAM,KAAI,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;QACjC,KAAK,GAAG,IAAI,CAAC,YAAY,GAAC,SAAS,CAAC,CAAC;QACrC,aAAa,GAAI,AAAC,KAAK,GAAC,GAAG,GAAE,YAAY,AAAC,CAAC;QAC3C,oFAAoF;QACpF,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC,CAAC,6CAA6C;QACzF,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC,CAAC,yCAAyC;QAChG,KAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,aAAa,CAAC;KACjC;CACF;AAED,yDAAyD;AACzD,eAAe,QAAQ,CAAC,CAAC,EAAE,YAAY,EAAE,IAAI,EAAE,MAAM,EAAE;IACrD,MAAM,GAAG,GAAG,CAAC,CAAC,aAAa,EAAE,AAAC;IAC9B,MAAM,aAAa,GAAG,MAAM,CAAA,GAAA,eAAQ,CAAA,CAAC,CAAC,EAAE,YAAY,CAAC,AAAC;IACtD,4DAA4D;IAC5D,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,IAAI;WAAI,aAAa,CAAC,MAAM,EAAE;KAAC,CAAC,AAAC;IACvD,WAAW;IACX,MAAM,OAAO,GAAG,IAAI,GAAG,EAAE,AAAC;IAC1B,qCAAqC;IACrC,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,EAAE,CAAE;QAC/B,MAAM,KAAK,GAAG,EAAE,AAAC;QACjB,KAAK,MAAM,IAAI,IAAI,aAAa,CAAC,IAAI,EAAE,CACrC,IAAI,CAAC,IAAI,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,EAC9B,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAGrB,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;KACvB;IACD,wBAAwB;IACxB,MAAM,IAAI,GAAG,IAAI,GAAG,EAAE,AAAC;IACvB,uCAAuC;IACvC,0BAA0B;IAC1B,MAAM,IAAI,GAAG,MAAM,CAAC,CAAC,IAAI,CAAC,AAAC;IAC3B,MAAM,IAAI,GAAG,MAAM,CAAC,CAAC,IAAI,CAAC,AAAC;IAC3B,MAAM,IAAI,GAAG,MAAM,CAAC,CAAC,IAAI,CAAC,AAAC;IAC3B,oBAAoB;IACpB,KAAK,MAAM,IAAI,IAAI,GAAG,CAAC,IAAI,EAAE,CAAE;QAC7B,MAAM,IAAI,GAAG,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,IAAI,AAAC;QAC5C,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,AAAC;QACtD,MAAM,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,EAAE,GAAI,CAAA,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAA,AAAC,AAAC;QACvE,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,IAAI,AAAC;QACpC,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,IAAI,AAAC;QACpC,wBAAwB;QACxB,MAAM,GAAG,GAAG,IAAI,CAAA,GAAA,YAAK,CAAA,CAAC,IAAI,GAAG,IAAI,EAAE,CAAC,IAAI,GAAG,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,AAAC;QAC9D,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;KACrB;IACD,qBAAqB;IACrB,CAAC,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;IAC3B,MAAM,IAAI,GAAG,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,AAAC;IACjC,MAAM,OAAO,GAAG,MAAM,gBAAgB,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,AAAC;IACpD,OAAO;QAAE,IAAI,EAAE,IAAI;QAAE,IAAI,EAAE,OAAO,CAAC,IAAI;KAAE,CAAC;CAC3C;AAED,aAAa;AACb,SAAS,SAAS,CAAC,CAAC,EAAE,WAAW,EAAE;IACjC,MAAM,IAAI,GAAI,CAAC,CAAC,gBAAgB,EAAE,AAAC;IACnC,MAAM,OAAO,GAAG,QAAQ,CAAC,IAAI,EAAE,WAAW,CAAC,AAAC;IAC5C,CAAC,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;CAC/B;AAED,YAAY;AACZ,SAAS,QAAQ,CAAC,IAAI,EAAE,YAAY,EAAE;IACpC,MAAM,OAAO,GAAG,IAAI,GAAG,EAAE,AAAC;IAC1B,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE,CAAE;QAC9B,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,AAAC;QACzB,CAAC,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;QAC1B,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;KACtB;IACD,OAAO,OAAO,CAAC;CAChB;;;;;;;;;AC/TD,oBAAoB;AACpB,SAAS,yCAAgB,CAAC,GAAG,EAAE;IAC7B,IAAI,UAAU,GAAG,CAAC,AAAC;IACnB,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,CACjC,UAAU,GAAG,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;IAEnC,MAAM,GAAG,GAAG,UAAU,GAAG,GAAG,CAAC,MAAM,AAAC;IACpC,OAAO,GAAG,CAAC;CACZ;AAED,wCAAwC;AACxC,SAAS,yCAAiB,CAAC,EAAE,EAAE,EAAE,EAAE;IACjC,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAChB,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GACtB,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GACxB,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAC1B,GAAG,CACJ,AAAC;IACF,OAAO,CAAC,CAAC;CACV;AAED,SAAS,yCAAwB,CAAC,EAAE,EAAE,EAAE,EAAE;IACxC,MAAM,CAAC,GACL,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GACxB,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GACxB,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,AAAC;IAC3B,OAAO,CAAC,CAAC;CACV;AAED,SAAS,yCAAe,CAAC,GAAG,EAAE,CAAC,EAAE;IAC/B,IAAI,MAAM,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,EACrB,GAAG,GAAG,GAAG,CAAC,MAAM,EAChB,KAAK,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,AAAC;IAC3B,IAAI,CAAC,GAAG,GAAG,EACP,MAAM,IAAI,UAAU,CAAC,+CAA+C,CAAC,CAAC;IAC1E,MAAO,CAAC,EAAE,CAAE;QACR,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,AAAC;QACxC,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,IAAI,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAC3C,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;KAChD;IACD,OAAO,MAAM,CAAC;CACf;;;;;;;;;;;;;ACzCD;;;;;AAIA,SAAS,wCAA6B,CAAC,KAAK,EAAE,GAAG,EAAE,SAAS,EAAC;IACzD,+BAA+B;IAC/B,MAAM,KAAK,GAAG,IAAI,CAAA,GAAA,YAAK,CAAA,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,AAAC;IACnD,MAAM,GAAG,GAAG,IAAI,CAAA,GAAA,YAAK,CAAA,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,AAAC;IAC3C,sBAAsB;IACtB,MAAM,MAAM,GAAG,EAAE,AAAC;IAClB,aAAa;IACb,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,SAAS,EAAC,CAAC,EAAE,CAAE;QAChC,MAAM,QAAQ,GAAG,CAAC,GAAC,SAAS,AAAC;QAC7B,MAAM,IAAI,GAAG,QAAQ,GAAC,KAAK,CAAC,CAAC,GAAG,AAAC,CAAA,CAAC,GAAC,QAAQ,CAAA,GAAE,GAAG,CAAC,CAAC,AAAC;QACnD,MAAM,IAAI,GAAG,QAAQ,GAAC,KAAK,CAAC,CAAC,GAAG,AAAC,CAAA,CAAC,GAAC,QAAQ,CAAA,GAAE,GAAG,CAAC,CAAC,AAAC;QACnD,MAAM,IAAI,GAAG,QAAQ,GAAC,KAAK,CAAC,CAAC,GAAG,AAAC,CAAA,CAAC,GAAC,QAAQ,CAAA,GAAE,GAAG,CAAC,CAAC,AAAC;QACnD,MAAM,QAAQ,GAAG,IAAI,CAAA,GAAA,YAAK,CAAA,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,AAAC;QAC7C,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KACzB;IACD,sBAAsB;IACtB,MAAM,cAAc,GAAG,IAAI,CAAA,GAAA,WAAI,CAAA,CAAC,MAAM,CAAC,AAAC;IACxC,OAAO,cAAc,CAAC;CACzB;AAED,SAAS,yCAA4B,CAAC,KAAK,EAAE,GAAG,EAAE,QAAQ,EAAC;IACvD,MAAM,IAAI,GAAG,CAAA,GAAA,wBAAiB,CAAA,CAAC,KAAK,EAAE,GAAG,CAAC,AAAC;IAC3C,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,QAAQ,CAAC,GAAC,CAAC,AAAC;IAC3C,MAAM,UAAU,GAAG,wCAA6B,CAAC,KAAK,EAAE,GAAG,EAAE,IAAI,CAAC,AAAC;IACnE,OAAO,UAAU,CAAC;CACrB;AAED,SAAS,yCAAQ,CAAC,MAAM,EAAC;IACrB,IAAI,EAAE,GAAG,CAAC,AAAC;IACX,IAAI,EAAE,GAAG,CAAC,AAAC;IACX,IAAI,EAAE,GAAG,CAAC,AAAC;IACX,MAAM,CAAC,OAAO,CAAC,CAAA,OAAO,GAAI;QACtB,EAAE,IAAI,OAAO,CAAC,CAAC,CAAC;QAChB,EAAE,IAAI,OAAO,CAAC,CAAC,CAAC;QAChB,EAAE,IAAI,OAAO,CAAC,CAAC,CAAC;KACnB,CAAC,CAAC;IACH,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC;IACxB,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC;IACxB,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC;IACxB,MAAM,SAAQ,GAAG,IAAI,CAAA,GAAA,YAAK,CAAA,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,AAAC;IACvC,OAAO,SAAQ,CAAC;CACnB;;;;;;AC7CD,MAAM,yCAAK;IACT,YAAY,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;QACnB,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QACX,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QACX,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;KACZ;IAED,SAAS,CAAC,MAAK,EAAE;QACf,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,MAAK,CAAC,CAAC,CAAC;QAC1B,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,MAAK,CAAC,CAAC,CAAC;QAC1B,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,MAAK,CAAC,CAAC,CAAC;KAC3B;CACF;;;;;;;;ACZD;AAEA,MAAM,yCAAI;IACN,YAAY,MAAM,CAAC;QACf,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,MAAM,CAAC,OAAO,CAAC,CAAA,CAAC,GAAI;YAChB,MAAM,KAAK,GAAG,IAAI,CAAA,GAAA,YAAK,CAAA,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,AAAC;YACvC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC3B,CAAC,CAAC;KACN;CACJ;;;;;;;;;;;;ACVD;AAEA,2CAA2C;AAC3C,2DAA2D;AAC3D,0BAA0B;AAC1B,eAAe,yCAAS,CAAC,CAAC,EAAE,IAAI,EAAE;IAChC,MAAM,GAAG,GAAG,CAAC,CAAC,aAAa,EAAE,AAAC;IAC9B,MAAM,eAAe,GAAG,IAAI,GAAG,EAAE,AAAC;IAElC,MAAM,QAAQ,GAAG,EAAE,AAAC;IACpB,MAAM,KAAK,GAAG,EAAE,AAAC;IAEjB,uBAAuB;IACvB,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACjB,eAAe,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IAE9B,iCAAiC;IACjC,MAAO,KAAK,CAAC,MAAM,GAAG,CAAC,CAAE;QACvB,MAAM,WAAW,GAAG,KAAK,CAAC,GAAG,EAAE,AAAC;QAChC,6CAA6C;QAC7C,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC3B,MAAM,UAAU,GAAG,GAAG,CAAC,GAAG,CAAC,WAAW,CAAC,AAAC;QACxC,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,CAAE;YAC1C,MAAM,SAAS,GAAG,UAAU,CAAC,CAAC,CAAC,AAAC;YAChC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;gBACjC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBACtB,eAAe,CAAC,GAAG,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;aAC7C;SACF;KACF;IAED,oCAAoC;IACpC,OAAO,eAAe,CAAC;CACxB;AAED,uBAAuB;AACvB,eAAe,yCAAQ,CAAC,CAAC,EAAE,IAAI,EAAE;IAC/B,MAAM,GAAG,GAAG,CAAC,CAAC,aAAa,EAAE,AAAC;IAC9B,MAAM,IAAI,GAAG,IAAI,GAAG,EAAE,AAAC;IACvB,4BAA4B;IAC5B,MAAM,eAAe,GAAG,MAAM,yCAAS,CAAC,CAAC,EAAE,IAAI,CAAC,AAAC;IACjD,8CAA8C;IAC9C,6CAA6C;IAC7C,KAAK,MAAM,CAAC,IAAI,GAAG,CAAC,IAAI,EAAE,CAAE;QAC1B,IAAI,CAAC,GAAG,CAAC,AAAC;QACV,IAAI,YAAY,GAAG,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,AAAC;QAC1C,MAAO,YAAY,IAAI,EAAE,CAAE;YACzB,YAAY,GAAG,eAAe,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YACjD,CAAC,IAAI,CAAC,CAAC;SACR;QACD,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;KAChB;IACD,sBAAsB;IACtB,OAAO,IAAI,CAAC;CACb;AAED,uCAAuC;AACvC,2BAA2B;AAC3B,eAAe,yCAAa,CAAC,KAAK,EAAE;IAClC,iCAAiC;IACjC,uCAAuC;IACvC,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,AAAC;IACxD,IAAI,MAAM,GAAG,MAAM,yCAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,AAAC;IACzC,8CAA8C;IAC9C,mDAAmD;IACnD,IAAI,eAAe,GAAG,EAAE,AAAC;IACzB,KAAK,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,EAAE,CAAE;QAC7B,MAAM,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,AAAC;QAC3B,IAAI,IAAI,GAAG,eAAe,EAAE;YAC1B,IAAI,GAAG,CAAC,CAAC;YACT,eAAe,GAAG,IAAI,CAAC;SACxB;KACF;IACD,qDAAqD;IACrD,MAAM,QAAQ,GAAG,IAAI,AAAC;IACtB,MAAM,GAAG,MAAM,yCAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IACrC,mBAAmB;IACnB,eAAe,GAAG,EAAE,CAAC;IACrB,KAAK,MAAM,EAAC,IAAI,MAAM,CAAC,IAAI,EAAE,CAAE;QAC7B,MAAM,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,EAAC,CAAC,AAAC;QAC3B,IAAI,IAAI,GAAG,eAAe,EAAE;YAC1B,IAAI,GAAG,EAAC,CAAC;YACT,eAAe,GAAG,IAAI,CAAC;SACxB;KACF;IACD,MAAM,SAAS,GAAG;QAChB,KAAK,EAAE,QAAQ;QACf,GAAG,EAAE,IAAI;QACT,QAAQ,EAAE,eAAe;KAC1B,AAAC;IACF,OAAO,SAAS,CAAC;CAClB;AAED,oBAAoB;AACpB,eAAe,yCAAc,CAAC,KAAK,EAAE,QAAQ,EAAE;IAC7C,MAAM,cAAc,GAAG,IAAI,GAAG,EAAE,AAAC;IACjC,MAAM,WAAW,GAAG,IAAI,GAAG,EAAE,AAAC;IAC9B,gCAAgC;IAChC,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,GAAK;QAC5B,8CAA8C;QAC9C,4CAA4C;QAC5C,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,AAAC;QACvC,cAAc,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;KACpC,CAAC,CAAC;IAEH,4BAA4B;IAC5B,IAAI,CAAC,GAAG,CAAC,AAAC;IACV,KAAK,MAAM,IAAI,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAE;QACrC,MAAM,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,AAAC;QACvC,IAAI,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YACxE,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;YAC7B,CAAC,IAAI,CAAC,CAAC;SACR;KACF;IAED,sDAAsD;IACtD,MAAM,QAAQ,GAAG,MAAM,CAAA,GAAA,YAAK,CAAA,CAAC,MAAM,CAAC,cAAc,EAAE,WAAW,CAAC,AAAC;IACjE,OAAO,QAAQ,CAAC;CACjB;;;;;;ACtHD,MAAM,yCAAK;IACT,YAAY,KAAK,EAAE,KAAK,CAAE;QACxB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACnB,2BAA2B;IAC3B,oBAAoB;KACrB;IAED,gBAAgB;IAChB,SAAS,GAAG;QACV,MAAM,OAAO,GACX,uBAAuB,GACvB,IAAI,CAAC,KAAK,CAAC,IAAI,GACf,aAAa,GACb,IAAI,CAAC,KAAK,CAAC,IAAI,GACf,QAAQ,AAAC;QACX,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;KACtB;IAED,aAAa;IACb,MAAM,UAAU,GAAG;QACjB,MAAM,IAAI,CAAC,sBAAsB,EAAE,CAAC;KACrC;IAED,oBAAoB;IACpB,aAAa,MAAM,CAAC,KAAK,EAAE,KAAK,EAAE;QAChC,MAAM,CAAC,GAAG,IAAI,yCAAK,CAAC,KAAK,EAAE,KAAK,CAAC,AAAC;QAClC,MAAM,CAAC,CAAC,UAAU,EAAE,CAAC;QACrB,OAAO,CAAC,CAAC;KACV;IAED,6CAA6C;IAC7C,MAAM,sBAAsB,GAAG;QAC7B,mEAAmE;QACnE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,GAAK;YAC3B,sBAAsB;YACtB,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,AAAC;YACzB,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,AAAC;YACrB,wBAAwB;YACxB,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;gBACzB,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,AAAC;gBAC5C,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACpC,MAAM,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;gBAC9B,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,AAAC;gBAC1C,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACtC;SACF,CAAC,CAAC;QACH,oDAAoD;QACpD,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAE;YACnC,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,UAAU,AAAC;YAC9C,MAAM,SAAS,GAAG;mBAAI,IAAI,GAAG,CAAC,MAAM,CAAC;aAAC,AAAC;YACvC,MAAM,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,AAAC;YACzC,IAAI,SAAS,GAAG,EAAE,EAChB,SAAS,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC,2CAA2C;YAE7E,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,UAAU,GAAG,SAAS,CAAC;SAC5C;KACF;IAED,aAAa;IACb,QAAQ,CAAC,MAAM,EAAE,IAAI,EAAE;QACrB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;KAC3B;IAED,cAAc;IACd,QAAQ,CAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE;QACzB,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE,IAAI,CAAC,AAAC;QAC3C,8CAA8C;QAC9C,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QACzC,uCAAuC;QACvC,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,AAAC;QAC3C,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KACnC;IAED,yCAAyC;IACzC,aAAa,GAAG;QACd,MAAM,SAAS,GAAG,IAAI,GAAG,EAAE,AAAC;QAC5B,gCAAgC;QAChC,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CACjC,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC;QAErD,OAAO,SAAS,CAAC;KAClB;IAED,wCAAwC;IACxC,kBAAkB,CAAC,IAAI,EAAE;QACvB,KAAK,MAAM,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE,CACzB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG;YAAE,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI;YAAE,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;SAAE,CAAC;KAE5E;IAED,qCAAqC;IACrC,mBAAmB,CAAC,IAAI,EAAE;QACxB,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,CAC3B,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,GAAG;YACzB,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI;YAC3B,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;SACrB,CAAC;KAEL;IAED,oBAAoB;IACpB,cAAc,GAAG;QACf,MAAM,KAAK,GAAG,IAAI,GAAG,EAAE,AAAC;QACxB,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAE;YACnC,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,AAAC;YAC5C,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;SACtB;QACD,OAAO,KAAK,CAAC;KACd;IAED,+BAA+B;IAC/B,kBAAkB,CAAC,MAAM,EAAE;QACzB,IAAI,MAAM,CAAC,IAAI,EACb,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAEvC,IAAI,MAAM,CAAC,IAAI,EACb,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;KAEzC;IAED,mCAAmC;IACnC,gBAAgB,GAAG;QACjB,MAAM,YAAY,GAAG;YAAE,IAAI,EAAE,IAAI,GAAG,EAAE;YAAE,IAAI,EAAE,IAAI,GAAG,EAAE;SAAE,AAAC;QAC1D,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAClC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAE7D,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAClC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAE/D,OAAO,YAAY,CAAC;KACrB;CACF;;;;;;;;;;;;;;;;;ACpID;;;;;AEAA,MAAM,yCAAG,GAAG;IACV,OAAO,EAAE;AACP,SAAC;AAAE,SAAC;AAAE,SAAC;AAAE,SAAC;AAAE,SAAC;AAAE,SAAC;AAAE,SAAC;AAAE,SAAC;AAAE,SAAC;AAAE,SAAC;AAAE,UAAE;AAAE,UAAE;AAAE,UAAE;AAAE,UAAE;AAAE,UAAE;AAAE,UAAE;AAAE,UAAE;AAAE,UAAE;AAAE,UAAE;AAAE,UAAE;AAAE,UAAE;AACxE,UAAE;AAAE,UAAE;AAAE,UAAE;AAAE,UAAE;AAAE,UAAE;AAAE,UAAE;AAAE,UAAE;AAAE,UAAE;AAAE,UAAE;AAAE,UAAE;AAAE,UAAE;AAAE,UAAE;AAAE,UAAE;KACnD;IACD,OAAO,EAAE;QACP;AAAC,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE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AE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AA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","sources":["src/Drawing.js","src/HelperClasses/Utilities.js","src/HelperClasses/GeometryHelpers.js","src/HelperClasses/Point.js","src/HelperClasses/Line.js","src/GraphMethods.js","src/Graph.js","src/index.js","src/DataLoader.js","src/SampleData/ZKC.js","src/SampleData/ZKC_simulated.js","src/GraphConstructors.js","src/Vertex.js","src/Edges.js","src/ThreeJSDrawer.js","src/MeshLine.js","src/Shaders/vertexShader.glsl.js","src/Shaders/fragmentShader.glsl.js","src/GraphDawer.js"],"sourcesContent":["import {\r\n  calculateAverage,\r\n  calculateSquaredDistance,\r\n} from \"./HelperClasses/Utilities.js\";\r\nimport { line_from_start_end_distance, line_from_start_end_divisions } from \"./HelperClasses/GeometryHelpers.js\";\r\nimport { Point } from \"./HelperClasses/Point.js\";\r\nimport { Dijkstra } from \"./GraphMethods.js\";\r\n\r\n// draw kamada kawai\r\nasync function SimulateKamadaKawai(G, iterations) {\r\n  const adjList = G.get_adjacency();\r\n  // pos map\r\n  const PosMapX = new Map();\r\n  const PosMapY = new Map();\r\n  let rx, ry;\r\n  for (const node of adjList.keys()) {\r\n    rx = Math.random() * 200;\r\n    ry = Math.random() * 200;\r\n    PosMapX.set(node, rx);\r\n    PosMapY.set(node, ry);\r\n  }\r\n  // start simulation\r\n  for (let i = 0; i < iterations; i++) {\r\n    // calculate the clustering force\r\n    for (const node of adjList.keys()) {\r\n      // this chunk is for the attraction force\r\n      // get the node pos\r\n      const neighbours = adjList.get(node);\r\n      // get the set of x's\r\n      const x_s = [];\r\n      // get the set of y's\r\n      const y_s = [];\r\n      // now iterate through the pos list and append\r\n      neighbours.forEach((n_s) => {\r\n        const n_pos_x = PosMapX.get(n_s);\r\n        const n_pos_y = PosMapY.get(n_s);\r\n        x_s.push(n_pos_x);\r\n        y_s.push(n_pos_y);\r\n      });\r\n      // now average out the values\r\n      const new_c_xpos = calculateAverage(x_s);\r\n      const new_c_ypos = calculateAverage(y_s);\r\n\r\n      // this chunk is for the repelling force\r\n      const x_r = [];\r\n      const y_r = [];\r\n      // then find the element\r\n      for (const otherNode of G.nodes.keys()) {\r\n        // get the position of all the other nodes\r\n        if (otherNode != node) {\r\n          // calculate inverse distance\r\n          const distDiffX = PosMapX.get(otherNode) - PosMapX.get(node);\r\n          const distDiffY = PosMapY.get(otherNode) - PosMapY.get(node);\r\n          // get the inverse square value\r\n          // add that to the *_r arrays\r\n          x_r.push(distDiffX);\r\n          y_r.push(distDiffY);\r\n        }\r\n      }\r\n      // this is the repulsion value\r\n      const A_mult = 2;\r\n      const new_x_r_pos = (A_mult * 1) / (calculateAverage(x_r)*calculateAverage(x_r));\r\n      const new_y_r_pos = (A_mult * 1) / (calculateAverage(y_r)*calculateAverage(y_r));\r\n\r\n      // calculate the dispacement amount in c/y pos\r\n      // this is the cohesion value\r\n      const C_mult = 1;\r\n      const new_c_xpos_dispacement = C_mult * (new_c_xpos - PosMapX.get(node));\r\n      const new_c_ypos_dispacement = C_mult * (new_c_ypos - PosMapY.get(node));\r\n\r\n      // then add the x and y components of the two vectors\r\n      const new_xpos = new_x_r_pos + new_c_xpos_dispacement + PosMapX.get(node);\r\n      const new_ypos = new_y_r_pos + new_c_ypos_dispacement + PosMapY.get(node);\r\n\r\n      // now set these positions\r\n      PosMapX.set(node, new_xpos);\r\n      PosMapY.set(node, new_ypos);\r\n    }\r\n    console.log(PosMapX);\r\n    console.log(PosMapY);\r\n  }\r\n  // return the position\r\n  let PosMap = new Map();\r\n  for (const p of PosMapX.keys()) {\r\n    PosMap.set(p, new Point(PosMapX.get(p), 0, PosMapY.get(p)));\r\n  }\r\n  // get / set positions\r\n  // move the points\r\n  // get the average pos\r\n  const sim_x = [];\r\n  const sim_y = [];\r\n  const sim_z = [];\r\n  let interimPoint;\r\n  for (const p of PosMap.keys()) {\r\n    interimPoint = PosMap.get(p);\r\n    sim_x.push(interimPoint.x);\r\n    sim_y.push(interimPoint.y);\r\n    sim_z.push(interimPoint.z);\r\n  }\r\n\r\n  const x_displacement = calculateAverage(sim_x);\r\n  const y_displacement = calculateAverage(sim_y);\r\n  const z_displacement = calculateAverage(sim_z);\r\n  const dispacementVector = new Point(\r\n    -x_displacement,\r\n    -y_displacement,\r\n    -z_displacement\r\n  );\r\n\r\n  PosMap = movePmap(PosMap, dispacementVector);\r\n\r\n  G.apply_position_map(PosMap);\r\n  const lmap = DrawEdgeLines(G, 1);\r\n  const newLmap = await DrawEdgeBundling(lmap, 12, 5);\r\n  return { pmap: PosMap, emap: newLmap.emap };\r\n}\r\n\r\n// instanciate a random set of positions \r\nfunction InstanciateRandomPositions(G){\r\n  const adjList = G.get_adjacency();\r\n  const PosMapX = new Map();\r\n  const PosMapY = new Map();\r\n  for (const node of adjList.keys()) {\r\n    PosMapX.set(node, Math.random() * 200);\r\n    PosMapY.set(node, Math.random() * 200);\r\n  }\r\n  let PosMap = new Map();\r\n  for (const p of PosMapX.keys()) {\r\n    PosMap.set(p, new Point(PosMapX.get(p), 0, PosMapY.get(p)));\r\n  }\r\n  G.apply_position_map(PosMap);\r\n  const lmap = DrawEdgeLines(G, 1);\r\n  return { pmap: PosMap, emap: lmap };\r\n}\r\n\r\n// draw the edge representations and then store them in the edge classes\r\nfunction DrawEdgeLines(G, divDistance) {\r\n  // this is the return map\r\n  const lineMap = new Map();\r\n  for (const key of G.edges.keys()) {\r\n    const edge = G.edges.get(key);\r\n    // get the start pos\r\n    const start = G.nodes.get(edge.start).data.pos;\r\n    const end = G.nodes.get(edge.end).data.pos;\r\n    const Line = line_from_start_end_distance(start, end, divDistance);\r\n    lineMap.set(key, Line);\r\n  }\r\n  return lineMap;\r\n}\r\n\r\n// update edge lines after moving points or something \r\nfunction UpdateEdgeLinesDist(G, divDistance){\r\n  let edge, start, end, line;\r\n  for (const key of G.edges.keys()) {\r\n    edge = G.edges.get(key);\r\n    // get the start pos\r\n    start = G.nodes.get(edge.start).data.pos;\r\n    end = G.nodes.get(edge.end).data.pos;\r\n    line = line_from_start_end_distance(start, end, divDistance);\r\n    edge.data.ldata = line;\r\n  }\r\n}\r\n\r\n// function Update EdgeLines based on the number of divisions \r\nfunction UpdateEdgeLinesDivs(G, Divs){\r\n  let edge, start, end, line;\r\n  for (const key of G.edges.keys()) {\r\n    edge = G.edges.get(key);\r\n    // get the start pos\r\n    start = G.nodes.get(edge.start).data.pos;\r\n    end = G.nodes.get(edge.end).data.pos;\r\n    line = line_from_start_end_divisions(start, end, Divs);\r\n    edge.data.ldata = line;\r\n  }\r\n}\r\n\r\n// now draw out the edge bundling thing\r\nasync function DrawEdgeBundling(LineMap, iterations, distance) {\r\n  const returnArray = LineMap;\r\n  // run it for whatever number of iterations\r\n  for (let i = 0; i < iterations; i++) {\r\n    // then iterate through every line\r\n    for (const key of returnArray.keys()) {\r\n      // then get the line that we are working with\r\n      const line = returnArray.get(key).data.ldata;\r\n      // then for each point in the line we have to move it closer to the other points\r\n      for (let ii = 1; ii < line.points.length - 1; ii++) {\r\n        // then get the point that we need to work with\r\n        const x_s = [];\r\n        const y_s = [];\r\n        const z_s = [];\r\n        const pnt = line.points[ii];\r\n        // then run the point accumulation algoritm\r\n        for (const otherKey of returnArray.keys()) {\r\n          if (otherKey != key) {\r\n            // then get the other line\r\n            const otherLine = returnArray.get(otherKey).data.ldata;\r\n            for (let iii = 1; iii < otherLine.points.length - 1; iii++) {\r\n              const otherpoint = otherLine.points[iii];\r\n              const d = calculateSquaredDistance(pnt, otherpoint);\r\n              if (d <= Math.pow(distance, 2)) {\r\n                const x_d = otherpoint.x - pnt.x;\r\n                const y_d = otherpoint.y - pnt.y;\r\n                const z_d = otherpoint.z - pnt.z;\r\n                x_s.push(x_d);\r\n                y_s.push(y_d);\r\n                z_s.push(z_d);\r\n              }\r\n            }\r\n          }\r\n        }\r\n        // now create a new displacement amount\r\n        const avgx = pnt.x + 0.8 * (calculateAverage(x_s) || 0);\r\n        const avgy = pnt.y + 0.8 * (calculateAverage(y_s) || 0);\r\n        const avgz = pnt.z + 0.8 * (calculateAverage(z_s) || 0);\r\n        const newPoint = new Point(avgx, avgy, avgz);\r\n        line.points[ii] = newPoint;\r\n      }\r\n    }\r\n  }\r\n  // now return that array\r\n  return { emap: returnArray };\r\n}\r\n\r\n// displace the th edges\r\nfunction DisplaceEdgeInY(LineMap, displacement) {\r\n  for (const key of LineMap.keys()) {\r\n    const line = LineMap.get(key);\r\n    // now for all the points in this\r\n    let pnt, ydisval; \r\n    for (let i = 0; i < line.data.ldata.points.length; i++) {\r\n      pnt = line.data.ldata.points[i];\r\n      ydisval = displacement*Math.sin((Math.PI * i)/(line.data.ldata.points.length-1));\r\n      pnt.y = pnt.y + ydisval;\r\n    }\r\n  }\r\n}\r\n\r\n// displace the graph by some measure \r\nfunction DisplaceVertices(nodeMap, parameter, displacement){\r\n  let max = 0;\r\n  let value, ydisplacement;\r\n  // go through the thing and set the min max values \r\n  for(const node of nodeMap.values()){\r\n    value = eval(\"node.data.\"+parameter);\r\n    if(value >= max){\r\n      max = value;\r\n    }\r\n  }\r\n  // go through the nodes again and set the values \r\n  for(const node of nodeMap.values()){\r\n    value = eval(\"node.data.\"+parameter);\r\n    ydisplacement = ((value/max)*displacement);\r\n    // now filter the values so that we know that the values are between a max and a min\r\n    ydisplacement = Math.max(0, ydisplacement); // this sets the lower bound to be something \r\n    ydisplacement = Math.min(displacement, ydisplacement); // this sets the upper bound of the thing\r\n    node.data.pos.y = ydisplacement;\r\n  }\r\n}\r\n\r\n// draw the circular vertical packing crypto like drawing\r\nasync function HivePlot(G, selectedNode, step, startP) {\r\n  const adj = G.get_adjacency();\r\n  const DijkstraDepth = await Dijkstra(G, selectedNode);\r\n  // calculate the number of steps that I am searching through\r\n  const steps = Math.max(...[...DijkstraDepth.values()]);\r\n  // step map\r\n  const stepMap = new Map();\r\n  // now create a stepped ring of stuff\r\n  for (let i = 0; i <= steps; i++) {\r\n    const ntier = [];\r\n    for (const nkey of DijkstraDepth.keys()) {\r\n      if (i == DijkstraDepth.get(nkey)) {\r\n        ntier.push(nkey);\r\n      }\r\n    }\r\n    stepMap.set(i, ntier);\r\n  }\r\n  // the returning pos map\r\n  const Pmap = new Map();\r\n  // now find the relevant node Positions\r\n  // get the start positions\r\n  const xoff = startP.x || 0;\r\n  const yoff = startP.y || 0;\r\n  const zoff = startP.z || 0;\r\n  // set the positions\r\n  for (const node of adj.keys()) {\r\n    const yval = DijkstraDepth.get(node) * step;\r\n    const depthArr = stepMap.get(DijkstraDepth.get(node));\r\n    const angle = 2 * Math.PI * (depthArr.indexOf(node) / depthArr.length);\r\n    const xval = Math.sin(angle) * yval;\r\n    const zval = Math.cos(angle) * yval;\r\n    // construct a new point\r\n    const pnt = new Point(xval + xoff, -yval + yoff, zval + zoff);\r\n    Pmap.set(node, pnt);\r\n  }\r\n  // simulate the lines\r\n  G.apply_position_map(Pmap);\r\n  const lmap = DrawEdgeLines(G, 1);\r\n  const newLmap = await DrawEdgeBundling(lmap, 12, 5);\r\n  return { pmap: Pmap, emap: newLmap.emap };\r\n}\r\n\r\n// move graph\r\nfunction MoveGraph(G, dispacement) {\r\n  const Pmap  = G.get_position_map();\r\n  const NewPmap = MovePmap(Pmap, dispacement);\r\n  G.apply_position_map(NewPmap);\r\n}\r\n\r\n// move pmap\r\nfunction MovePmap(Pmap, displacement) {\r\n  const newPmap = new Map();\r\n  for (const node of Pmap.keys()) {\r\n    const p = Pmap.get(node);\r\n    p.translate(displacement);\r\n    newPmap.set(node, p);\r\n  }\r\n  return newPmap;\r\n}\r\n\r\nexport {\r\n  SimulateKamadaKawai,\r\n  DrawEdgeLines,\r\n  DrawEdgeBundling,\r\n  HivePlot,\r\n  DisplaceEdgeInY,\r\n  MoveGraph,\r\n  InstanciateRandomPositions,\r\n  DisplaceVertices,\r\n  UpdateEdgeLinesDist,\r\n  UpdateEdgeLinesDivs,\r\n};\r\n","// Calculate average\r\nfunction calculateAverage(arr) {\r\n  let runningSum = 0;\r\n  for (let i = 0; i < arr.length; i++) {\r\n    runningSum = runningSum + arr[i];\r\n  }\r\n  const avg = runningSum / arr.length;\r\n  return avg;\r\n}\r\n\r\n// calculate distance between two points\r\nfunction calculateDistance(p1, p2) {\r\n  const d = Math.pow(\r\n    Math.pow(p1.x - p2.x, 2) +\r\n      Math.pow(p1.y - p2.y, 2) +\r\n      Math.pow(p1.z - p2.z, 2),\r\n    0.5\r\n  );\r\n  return d;\r\n}\r\n\r\nfunction calculateSquaredDistance(p1, p2) {\r\n  const d =\r\n    Math.pow(p1.x - p2.x, 2) +\r\n    Math.pow(p1.y - p2.y, 2) +\r\n    Math.pow(p1.z - p2.z, 2);\r\n  return d;\r\n}\r\n\r\nfunction getRandomSubset(arr, n) {\r\n  var result = new Array(n),\r\n      len = arr.length,\r\n      taken = new Array(len);\r\n  if (n > len)\r\n      throw new RangeError(\"getRandom: more elements taken than available\");\r\n  while (n--) {\r\n      var x = Math.floor(Math.random() * len);\r\n      result[n] = arr[x in taken ? taken[x] : x];\r\n      taken[x] = --len in taken ? taken[len] : len;\r\n  }\r\n  return result;\r\n}\r\n\r\nexport { calculateAverage, calculateDistance, calculateSquaredDistance, getRandomSubset};\r\n","import {Point} from \"./Point.js\";\r\nimport {Line} from \"./Line.js\";\r\nimport {calculateDistance} from \"./Utilities.js\";\r\n\r\nfunction line_from_start_end_divisions(start, end, divisions){\r\n    // create a start and end time \r\n    const Start = new Point(start.x, start.y, start.z);\r\n    const End = new Point(end.x, end.y, end.z);\r\n    // interpolated points\r\n    const points = [];\r\n    // divisions \r\n    for (let i = 0; i <= divisions;i++) {\r\n        const interVar = i/divisions;\r\n        const newx = interVar*Start.x + (1-interVar)*End.x;\r\n        const newy = interVar*Start.y + (1-interVar)*End.y;\r\n        const newz = interVar*Start.z + (1-interVar)*End.z;\r\n        const newPoint = new Point(newx, newy, newz);\r\n        points.push(newPoint);\r\n    }\r\n    // create a new point \r\n    const SubdividedLine = new Line(points);\r\n    return SubdividedLine;\r\n}\r\n\r\nfunction line_from_start_end_distance(start, end, distance){\r\n    const dist = calculateDistance(start, end);\r\n    const divs = Math.round(dist / distance)+2;\r\n    const subdivline = line_from_start_end_divisions(start, end, divs);\r\n    return subdivline;\r\n}\r\n\r\nfunction centroid(points){\r\n    let rx = 0;\r\n    let ry = 0;\r\n    let rz = 0;\r\n    points.forEach(element => {\r\n        rx += element.x;\r\n        ry += element.y;\r\n        rz += element.z;\r\n    });\r\n    rx = rx / points.length;\r\n    ry = ry / points.length;\r\n    rz = rz / points.length;\r\n    const centroid = new Point(rx, ry, rz);\r\n    return centroid;\r\n}\r\n\r\nexport { line_from_start_end_divisions, line_from_start_end_distance, Point, Line, calculateDistance, centroid}","class Point {\r\n  constructor(x, y, z) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.z = z;\r\n  }\r\n\r\n  translate(Point) {\r\n    this.x = this.x + Point.x;\r\n    this.y = this.y + Point.y;\r\n    this.z = this.z + Point.z;\r\n  }\r\n}\r\n\r\nexport { Point };\r\n","import { Point } from \"./Point.js\";\r\n\r\nclass Line{\r\n    constructor(points){\r\n        this.points = [];\r\n        points.forEach(p => {\r\n            const point = new Point(p.x, p.y, p.z);\r\n            this.points.push(point);\r\n        });\r\n    }\r\n}\r\n\r\nexport { Line }","import { Graph } from \"./Graph.js\";\r\n\r\n// do a BFS Search Starting from some point\r\n// searches the whole graph and returns a map of which node\r\n// was searched from where\r\nasync function BFSSearch(G, node) {\r\n  const adj = G.get_adjacency();\r\n  const exploredFromMap = new Map();\r\n\r\n  const explored = [];\r\n  const stack = [];\r\n\r\n  // queue the first node\r\n  stack.push(node);\r\n  exploredFromMap.set(node, -1);\r\n\r\n  // search through the whole graph\r\n  while (stack.length > 0) {\r\n    const currentNode = stack.pop();\r\n    // add this current node to the explored list\r\n    explored.push(currentNode);\r\n    const neighbours = adj.get(currentNode);\r\n    for (let i = 0; i < neighbours.length; i++) {\r\n      const neighbour = neighbours[i];\r\n      if (!explored.includes(neighbour)) {\r\n        stack.push(neighbour);\r\n        exploredFromMap.set(neighbour, currentNode);\r\n      }\r\n    }\r\n  }\r\n\r\n  // then return the explored from map\r\n  return exploredFromMap;\r\n}\r\n\r\n// do a dijkstra Search\r\nasync function Dijkstra(G, Node) {\r\n  const adj = G.get_adjacency();\r\n  const Dmap = new Map();\r\n  // get the explored from map\r\n  const exploredFromMap = await BFSSearch(G, Node);\r\n  // then for each element in the map go through\r\n  // contact trace where that element came from\r\n  for (const n of adj.keys()) {\r\n    let i = 0;\r\n    let exploredFrom = exploredFromMap.get(n);\r\n    while (exploredFrom != -1) {\r\n      exploredFrom = exploredFromMap.get(exploredFrom);\r\n      i += 1;\r\n    }\r\n    Dmap.set(n, i);\r\n  }\r\n  // now return this map\r\n  return Dmap;\r\n}\r\n\r\n// This file contains basic things like\r\n// Graph searches and stuff\r\nasync function GraphDiameter(graph) {\r\n  // find the diameter of the graph\r\n  // start Dijkstra from some random node\r\n  let seed = Math.floor(Math.random() * graph.nodes.size);\r\n  let Dstart = await Dijkstra(graph, seed);\r\n  // iterate through all the values and then get\r\n  // the value that is the highest amongst the others\r\n  let currentDistance = -1;\r\n  for (const n of Dstart.keys()) {\r\n    const dval = Dstart.get(n);\r\n    if (dval > currentDistance) {\r\n      seed = n;\r\n      currentDistance = dval;\r\n    }\r\n  }\r\n  // then search from there to the furthest point again\r\n  const newStart = seed;\r\n  Dstart = await Dijkstra(graph, seed);\r\n  // repeat the thing\r\n  currentDistance = -1;\r\n  for (const n of Dstart.keys()) {\r\n    const dval = Dstart.get(n);\r\n    if (dval > currentDistance) {\r\n      seed = n;\r\n      currentDistance = dval;\r\n    }\r\n  }\r\n  const returnObj = {\r\n    start: newStart,\r\n    end: seed,\r\n    distance: currentDistance,\r\n  };\r\n  return returnObj;\r\n}\r\n\r\n// Select a subrgaph\r\nasync function SelectSubgraph(graph, nodeList) {\r\n  const prunedVertices = new Map();\r\n  const prunedEdges = new Map();\r\n  // set the prunded vertices list\r\n  nodeList.forEach((element) => {\r\n    // get the element from the graph and set that\r\n    // data element in the  prunded vertices map\r\n    const ndata = graph.nodes.get(element);\r\n    prunedVertices.set(element, ndata);\r\n  });\r\n\r\n  // set the pruned edges list\r\n  let i = 0;\r\n  for (const edge of graph.edges.keys()) {\r\n    const edgeData = graph.edges.get(edge);\r\n    if (nodeList.includes(edgeData.start) && nodeList.includes(edgeData.end)) {\r\n      prunedEdges.set(i, edgeData);\r\n      i += 1;\r\n    }\r\n  }\r\n\r\n  // construct a new graph that represents the new graph\r\n  const newGraph = await Graph.create(prunedVertices, prunedEdges);\r\n  return newGraph;\r\n}\r\n\r\n// this is where the exports happen\r\nexport { GraphDiameter, Dijkstra, BFSSearch, SelectSubgraph };\r\n","class Graph {\r\n  constructor(nodes, edges) {\r\n    this.nodes = nodes;\r\n    this.edges = edges;\r\n    // execute Internal methods\r\n    // this.printData();\r\n  }\r\n\r\n  // test function\r\n  printData() {\r\n    const message =\r\n      \"This is a graph with \" +\r\n      this.nodes.size +\r\n      \" nodes and \" +\r\n      this.edges.size +\r\n      \" edges\";\r\n    console.log(message);\r\n  }\r\n\r\n  // initialize\r\n  async initialize() {\r\n    await this.constructAdjacencyList();\r\n  }\r\n\r\n  // new create method\r\n  static async create(nodes, edges) {\r\n    const g = new Graph(nodes, edges);\r\n    await g.initialize();\r\n    return g;\r\n  }\r\n\r\n  // construct the adjacency list represntation\r\n  async constructAdjacencyList() {\r\n    // I'm constructing a Graph here so some of the stuff doesnt matter\r\n    this.edges.forEach((edge) => {\r\n      // get the start point\r\n      const start = edge.start;\r\n      const end = edge.end;\r\n      // set the node property\r\n      if (this.nodes.get(start)) {\r\n        const relevantSNode = this.nodes.get(start);\r\n        relevantSNode.neighbours.push(end);\r\n      } else if (this.nodes.get(end)) {\r\n        const relevantENode = this.nodes.get(end);\r\n        relevantENode.neighbours.push(start);\r\n      }\r\n    });\r\n    // then for each node then get the unique neighbours\r\n    for (const key of this.nodes.keys()) {\r\n      const neighs = this.nodes.get(key).neighbours;\r\n      const new_neigh = [...new Set(neighs)];\r\n      const selfIndex = new_neigh.indexOf(key);\r\n      if (selfIndex > -1) {\r\n        new_neigh.splice(selfIndex, 1); // 2nd parameter means remove one item only\r\n      }\r\n      this.nodes.get(key).neighbours = new_neigh;\r\n    }\r\n  }\r\n\r\n  // add a node\r\n  add_node(nodeID, data) {\r\n    this.nodes[nodeID] = data;\r\n  }\r\n\r\n  // add an edge\r\n  add_edge(start, end, data) {\r\n    const newEdge = new Edge(start, end, data);\r\n    // this is a new edge that we add to the edges\r\n    this.edges.set(this.edges.size, newEdge);\r\n    // also add this to the node neighbours\r\n    const relevantNode = this.nodes.get(start);\r\n    relevantNode.neighbours.push(end);\r\n  }\r\n\r\n  // get a sparse reprentation of the graph\r\n  get_adjacency() {\r\n    const SparseMap = new Map();\r\n    // iterate through the node list\r\n    for (const key of this.nodes.keys()) {\r\n      SparseMap.set(key, this.nodes.get(key).neighbours);\r\n    }\r\n    return SparseMap;\r\n  }\r\n\r\n  // set position based on simulated array\r\n  apply_position_map(data) {\r\n    for (const n of data.keys()) {\r\n      this.nodes.get(n).data = { ...this.nodes.get(n).data, pos: data.get(n) };\r\n    }\r\n  }\r\n\r\n  // create new edge pos representation\r\n  apply_edge_pos_maps(data) {\r\n    for (const key of data.keys()) {\r\n      this.edges.get(key).data = {\r\n        ...this.edges.get(key).data,\r\n        ldata: data.get(key),\r\n      };\r\n    }\r\n  }\r\n\r\n  // get the edge reps\r\n  get_edge_lines() {\r\n    const lines = new Map();\r\n    for (const key of this.edges.keys()) {\r\n      const edge = this.edges.get(key).data.ldata;\r\n      lines.set(key, edge);\r\n    }\r\n    return lines;\r\n  }\r\n\r\n  // graph apply pos and edge map\r\n  apply_drawing_maps(layout) {\r\n    if (layout.pmap) {\r\n      this.apply_position_map(layout.pmap);\r\n    }\r\n    if (layout.emap) {\r\n      this.apply_edge_pos_maps(layout.emap);\r\n    }\r\n  }\r\n\r\n  // get the positon map of the graph\r\n  get_position_map() {\r\n    const returnObject = { pmap: new Map(), emap: new Map() };\r\n    for (const node of this.nodes.keys()) {\r\n      returnObject.pmap.set(node, this.nodes.get(node).data.pos);\r\n    }\r\n    for (const edge of this.edges.keys()) {\r\n      returnObject.emap.set(edge, this.edges.get(edge).data.ldata);\r\n    }\r\n    return returnObject;\r\n  }\r\n}\r\n\r\n// Export the graph Library\r\nexport { Graph };\r\n","export { Graph } from \"./Graph.js\";\r\nexport * as GraphMethods from \"./GraphMethods.js\";\r\nexport * as SampleData from \"./DataLoader.js\";\r\nexport * as Constructors from \"./GraphConstructors.js\";\r\nexport * as Drawing from \"./Drawing.js\";\r\nexport * as Geometry from \"./HelperClasses/GeometryHelpers.js\";\r\nexport * as Utilities from \"./HelperClasses/Utilities.js\";\r\nexport * as threeDWrapper from \"./ThreeJSDrawer.js\";\r\nexport * as GraphDrawer from \"./GraphDawer.js\";","// load up the ZKC dataset\r\nimport { zkc } from \"./SampleData/ZKC.js\";\r\nimport { zkc_simulated } from \"./SampleData/ZKC_simulated.js\";\r\nimport { ConstructGraphNodeEdgesList } from \"./GraphConstructors.js\";\r\nimport { Graph } from \"./Graph.js\";\r\nimport { Point } from \"./HelperClasses/Point.js\";\r\nimport { Vertex } from \"./Vertex.js\";\r\nimport { Edge } from \"./Edges.js\";\r\nimport { DrawEdgeLines } from \"./Drawing.js\";\r\n\r\nasync function LoadZKC() {\r\n  // load up the dataset representation\r\n  const data = zkc;\r\n  const G = await ConstructGraphNodeEdgesList(data.nodes, data.edges);\r\n  return G;\r\n}\r\n\r\nasync function LoadZKCSimulated() {\r\n  // make a map\r\n  const data = zkc_simulated;\r\n  const nodes = new Map();\r\n  const edges = new Map();\r\n  // set the node map\r\n  data.nodes.forEach((node) => {\r\n    const id = node.id;\r\n    const pos = new Point(node.px*50, 0, node.py*50);\r\n    const modularity = node.member;\r\n    const n = new Vertex({ pos: pos, size:10, info:\"Node Info\", modularity:modularity });\r\n    nodes.set(id, n);\r\n  });\r\n  // set the edge map\r\n  for (let i = 0; i < data.edges.length; i++) {\r\n    const edge = data.edges[i];\r\n    const start = edge[0];\r\n    const end = edge[1];\r\n    const e = new Edge(start, end, {});\r\n    edges.set(i, e);\r\n  }\r\n  // make a graph object\r\n  const G = await Graph.create(nodes, edges);\r\n  const lmap = DrawEdgeLines(G, 10);\r\n  G.apply_edge_pos_maps(lmap);\r\n  return G;\r\n}\r\n\r\n// exports\r\nexport { LoadZKC, LoadZKCSimulated };\r\n","const zkc = {\r\n  \"nodes\": [\r\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\r\n    21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33\r\n  ],\r\n  \"edges\": [\r\n    [0, 1],\r\n    [0, 2],\r\n    [0, 3],\r\n    [0, 4],\r\n    [0, 5],\r\n    [0, 6],\r\n    [0, 7],\r\n    [0, 8],\r\n    [0, 10],\r\n    [0, 11],\r\n    [0, 12],\r\n    [0, 13],\r\n    [0, 17],\r\n    [0, 19],\r\n    [0, 21],\r\n    [0, 31],\r\n    [1, 2],\r\n    [1, 3],\r\n    [1, 7],\r\n    [1, 13],\r\n    [1, 17],\r\n    [1, 19],\r\n    [1, 21],\r\n    [1, 30],\r\n    [2, 3],\r\n    [2, 7],\r\n    [2, 8],\r\n    [2, 9],\r\n    [2, 13],\r\n    [2, 27],\r\n    [2, 28],\r\n    [2, 32],\r\n    [3, 7],\r\n    [3, 12],\r\n    [3, 13],\r\n    [4, 6],\r\n    [4, 10],\r\n    [5, 6],\r\n    [5, 10],\r\n    [5, 16],\r\n    [6, 16],\r\n    [8, 30],\r\n    [8, 32],\r\n    [8, 33],\r\n    [9, 33],\r\n    [13, 33],\r\n    [14, 32],\r\n    [14, 33],\r\n    [15, 32],\r\n    [15, 33],\r\n    [18, 32],\r\n    [18, 33],\r\n    [19, 33],\r\n    [20, 32],\r\n    [20, 33],\r\n    [22, 32],\r\n    [22, 33],\r\n    [23, 25],\r\n    [23, 27],\r\n    [23, 29],\r\n    [23, 32],\r\n    [23, 33],\r\n    [24, 25],\r\n    [24, 27],\r\n    [24, 31],\r\n    [25, 31],\r\n    [26, 29],\r\n    [26, 33],\r\n    [27, 33],\r\n    [28, 31],\r\n    [28, 33],\r\n    [29, 32],\r\n    [29, 33],\r\n    [30, 32],\r\n    [30, 33],\r\n    [31, 32],\r\n    [31, 33],\r\n    [32, 33]\r\n  ]\r\n}\r\n\r\nexport {zkc}","const zkc_simulated = {\r\n  nodes: [\r\n    { id: 0, px: 0.09083423378081436, py: 1.164162667707135, member:0 },\r\n    { id: 1, px: -0.5395391223661004, py: 0.8787097882002372, member:0 },\r\n    { id: 2, px: 0.25483951690897244, py: -0.011894166387290125, member:0 },\r\n    { id: 3, px: 0.5292273814873625, py: 0.8137715604013231, member:0 },\r\n    { id: 4, px: 0.6759740200024705, py: 2.010590015934319, member:3 },\r\n    { id: 5, px: 0.6648725961138767, py: 2.3765595730406712, member:3 },\r\n    { id: 6, px: -0.015476857282255526, py: 2.421851366492045, member:3 },\r\n    { id: 7, px: 0.9923183157183725, py: 0.7358251458599251, member:0 },\r\n    { id: 8, px: -0.6148021363450372, py: -0.03465499210385469, member:1 },\r\n    { id: 9, px: 0.24714516178546894, py: -1.012380550604274, member:0 },\r\n    { id: 10, px: 1.3293288757439443, py: 1.8641805845025743, member:3 },\r\n    { id: 11, px: -0.6571791278403557, py: 2.2163816367270526, member:0 },\r\n    { id: 12, px: 1.5181044222926994, py: 1.3282665066698078, member:0 },\r\n    { id: 13, px: -0.2979203330003603, py: 0.18438685313887027, member:0 },\r\n    { id: 14, px: -1.7502345807734376, py: -1.0935551887354324, member:1 },\r\n    { id: 15, px: -1.630224787934251, py: -1.5015879850995024, member:1 },\r\n    { id: 16, px: 0.5585243394360673, py: 3.5, member:3 },\r\n    { id: 17, px: -0.9776584881745712, py: 1.799718659872538, member:0 },\r\n    { id: 18, px: -1.385649185975611, py: -1.870388302312794, member:1 },\r\n    { id: 19, px: -0.9638464461397331, py: 0.24226946279518707, member:0 },\r\n    { id: 20, px: -1.0268125129631975, py: -2.1543990524894148, member:1 },\r\n    { id: 21, px: -1.3061680833745626, py: 1.527228276383933, member:0 },\r\n    { id: 22, px: -0.5552461198316926, py: -2.2498070887997685, member:1 },\r\n    { id: 23, px: 0.8262268914348979, py: -1.804253160744954, member:2 },\r\n    { id: 24, px: 1.9952840970427212, py: -1.0382885070400036, member:2 },\r\n    { id: 25, px: 1.9207660053211613, py: -0.5823795272244723, member:2 },\r\n    { id: 26, px: -0.1664715343791652, py: -2.6527209168204373, member:1 },\r\n    { id: 27, px: 0.9961959436268844, py: -1.0143754028553023, member:2 },\r\n    { id: 28, px: 0.6488880579857091, py: -1.024671500275854, member:2 },\r\n    { id: 29, px: 0.2398196340697841, py: -2.171491081802323, member:1 },\r\n    { id: 30, px: -1.3348117368940753, py: -0.31290471156377053, member:1 },\r\n    { id: 31, px: 0.6901260074375327, py: -0.2526601933356052, member:2 },\r\n    { id: 32, px: -0.6030949145287146, py: -1.0927507849665647, member:1 },\r\n    { id: 33, px: -0.3533395323856202, py: -1.1887389845640028, member:1 },\r\n  ],\r\n  edges: [\r\n    [0, 1],\r\n    [0, 2],\r\n    [0, 3],\r\n    [0, 4],\r\n    [0, 5],\r\n    [0, 6],\r\n    [0, 7],\r\n    [0, 8],\r\n    [0, 10],\r\n    [0, 11],\r\n    [0, 12],\r\n    [0, 13],\r\n    [0, 17],\r\n    [0, 19],\r\n    [0, 21],\r\n    [0, 31],\r\n    [1, 2],\r\n    [1, 3],\r\n    [1, 7],\r\n    [1, 13],\r\n    [1, 17],\r\n    [1, 19],\r\n    [1, 21],\r\n    [1, 30],\r\n    [2, 3],\r\n    [2, 7],\r\n    [2, 8],\r\n    [2, 9],\r\n    [2, 13],\r\n    [2, 27],\r\n    [2, 28],\r\n    [2, 32],\r\n    [3, 7],\r\n    [3, 12],\r\n    [3, 13],\r\n    [4, 6],\r\n    [4, 10],\r\n    [5, 6],\r\n    [5, 10],\r\n    [5, 16],\r\n    [6, 16],\r\n    [8, 30],\r\n    [8, 32],\r\n    [8, 33],\r\n    [9, 33],\r\n    [13, 33],\r\n    [14, 32],\r\n    [14, 33],\r\n    [15, 32],\r\n    [15, 33],\r\n    [18, 32],\r\n    [18, 33],\r\n    [19, 33],\r\n    [20, 32],\r\n    [20, 33],\r\n    [22, 32],\r\n    [22, 33],\r\n    [23, 25],\r\n    [23, 27],\r\n    [23, 29],\r\n    [23, 32],\r\n    [23, 33],\r\n    [24, 25],\r\n    [24, 27],\r\n    [24, 31],\r\n    [25, 31],\r\n    [26, 29],\r\n    [26, 33],\r\n    [27, 33],\r\n    [28, 31],\r\n    [28, 33],\r\n    [29, 32],\r\n    [29, 33],\r\n    [30, 32],\r\n    [30, 33],\r\n    [31, 32],\r\n    [31, 33],\r\n    [32, 33],\r\n  ],\r\n};\r\n\r\nexport { zkc_simulated };\r\n","import { Graph } from \"./Graph.js\";\r\nimport { Vertex } from \"./Vertex.js\";\r\nimport { Edge } from \"./Edges.js\";\r\n\r\n// construct a graph based on an edge list etc\r\nasync function ConstructGraphNodeEdgesList(nodes, edges) {\r\n  // make a node OBJ\r\n  const nodeOBJ = new Map();\r\n  for (let i = 0; i < nodes.length; i++) {\r\n    const n = new Vertex(nodes[i].data);\r\n    nodeOBJ.set(nodes[i], n);\r\n  }\r\n  // make an edge object\r\n  const edgeOBJ = new Map();\r\n  for (let i = 0; i < edges.length; i++) {\r\n    const e = new Edge(edges[i][0], edges[i][1], edges[i].data);\r\n    edgeOBJ.set(i, e);\r\n  }\r\n  // make a graph object\r\n  const G = await Graph.create(nodeOBJ, edgeOBJ);\r\n  return G;\r\n}\r\n\r\nexport { ConstructGraphNodeEdgesList };\r\n","class Vertex {\r\n    constructor(data){\r\n        // this data is an arbitrary thing with which I can create any object\r\n        this.data = { ... data};\r\n        // the neighbours bit is explicity set from the code outside\r\n        this.neighbours = [];\r\n    }\r\n}\r\n\r\nexport {Vertex}","class Edge{\r\n    constructor(start, end, data){\r\n        this.start = start;\r\n        this.end = end;\r\n        this.data = {...data};\r\n    }\r\n}\r\n\r\nexport {Edge}","import * as THREE from \"three\";\r\nimport {\r\n  MeshLine,\r\n  MeshLineMaterial,\r\n  MeshLineRaycast,\r\n} from \"./MeshLine.js\";\r\nimport { vertexShader } from \"./Shaders/vertexShader.glsl.js\";\r\nimport { fragmentShader } from \"./Shaders/fragmentShader.glsl.js\";\r\nimport * as GraphMethods from \"./GraphMethods.js\";\r\n\r\n// Draw the graph out as a bunch of vertices\r\nfunction DrawTHREEGraphVertices(Graph, bounds) {\r\n  const positionAttribute = [];\r\n  const sizes = [];\r\n  const colors = [];\r\n  const labels = [];\r\n  const color = new THREE.Color();\r\n  // process the data set\r\n  let i = 0;\r\n  for (const node of Graph.nodes.keys()) {\r\n    const nodeData = Graph.nodes.get(node);\r\n    positionAttribute.push(\r\n      nodeData.data.pos.x * bounds,\r\n      nodeData.data.pos.y * bounds,\r\n      nodeData.data.pos.z * bounds\r\n    );\r\n    color.setRGB(255, 255, 255);\r\n    color.toArray(colors, i * 3);\r\n    if (nodeData.data.size != undefined){\r\n      sizes.push(nodeData.data.size);\r\n    } else {\r\n      sizes.push(4)\r\n    }\r\n    labels.push(node);\r\n    i += 1;\r\n  }\r\n\r\n  const geometry = new THREE.BufferGeometry();\r\n  // geometry attribute\r\n  geometry.setAttribute(\r\n    \"position\",\r\n    new THREE.Float32BufferAttribute(positionAttribute, 3)\r\n  );\r\n  // color attribute\r\n  geometry.setAttribute(\r\n    \"customColor\",\r\n    new THREE.Float32BufferAttribute(colors, 3)\r\n  );\r\n  // size attribute\r\n  geometry.setAttribute(\"size\", new THREE.Float32BufferAttribute(sizes, 1));\r\n  // label attribute\r\n  geometry.setAttribute(\"label\", new THREE.Int32BufferAttribute(labels, 1));\r\n  geometry.name = \"THIS IS THE VERTEX GROUP\";\r\n\r\n  // example material\r\n  const PointMaterial = new THREE.ShaderMaterial({\r\n    uniforms: {\r\n      color: { value: new THREE.Color(0xffffff) },\r\n      pointTexture: {\r\n        value: new THREE.TextureLoader().load(\"./Textures/Square.png\"),\r\n      },\r\n      alphaTest: { value: 0.9 },\r\n    },\r\n    vertexShader: vertexShader,\r\n    fragmentShader: fragmentShader,\r\n  });\r\n\r\n  const vertices = new THREE.Points(geometry, PointMaterial);\r\n  return vertices;\r\n}\r\n\r\n// then make a thing which draws out all the edges (THICK)\r\nfunction DrawTHREEGraphEdgesThick(G, bounds) {\r\n  return DrawThickEdgesFromEdgeMap(G.edges, bounds);\r\n}\r\n\r\n// draw a thing to draw out all the edges from the edge map stuff\r\nfunction DrawThickEdgesFromEdgeMap(emap, bounds) {\r\n  // this is the line thing\r\n  const mat = new MeshLineMaterial({\r\n    transparent: true,\r\n    lineWidth: 5,\r\n    opacity: 0.8,\r\n    color: new THREE.Color(0xcaf0f8),\r\n  });\r\n  const meshes = new THREE.Group();\r\n  for (const edge of emap.values()) {\r\n    const lval = edge.data.ldata;\r\n    const pnts = [];\r\n    lval.points.forEach((pnt) => {\r\n      pnts.push(\r\n        new THREE.Vector3(\r\n          pnt.x * bounds - bounds / 2,\r\n          pnt.y * bounds - bounds / 2,\r\n          pnt.z * bounds - bounds / 2\r\n        )\r\n      );\r\n    });\r\n    const geo = new THREE.BufferGeometry().setFromPoints(pnts);\r\n    const line = new MeshLine();\r\n    line.setGeometry(geo);\r\n    const lineMesh = new THREE.Mesh(line, mat);\r\n    meshes.add(lineMesh);\r\n  }\r\n  return meshes;\r\n}\r\n\r\n// make a thing that draws out all the lines (Thin)\r\nfunction DrawTHREEGraphEdgesThin(G, bounds) {\r\n  return DrawThinEdgesFromEdgeMap(G.edges, bounds);\r\n}\r\n\r\n// function to draw edges from edge map\r\nfunction DrawThinEdgesFromEdgeMap(emap, bounds) {\r\n  const material = new THREE.LineBasicMaterial({\r\n    color: 0x90e0ef,\r\n  });\r\n  const lines = new THREE.Group();\r\n  for (const edge of emap.values()) {\r\n    const points = [];\r\n    // get the edge data\r\n    const ldata = edge.data.ldata.points;\r\n    ldata.forEach((element) => {\r\n      points.push(\r\n        new THREE.Vector3(\r\n          element.x * bounds,\r\n          element.y * bounds,\r\n          element.z * bounds\r\n        )\r\n      );\r\n    });\r\n    // then make the line thing\r\n    const geometry = new THREE.BufferGeometry().setFromPoints(points);\r\n    const line = new THREE.Line(geometry, material);\r\n    lines.add(line);\r\n  }\r\n  return lines;\r\n}\r\n\r\n// draw the cube box graph here\r\nfunction AddBoxBasedImaging(vertexMap, bounds) {\r\n  // returns a group\r\n  const group = new THREE.Group();\r\n  const material = new THREE.MeshBasicMaterial({ color: 0x0466c8 });\r\n  for (const node of vertexMap.keys()) {\r\n    const nodeData = vertexMap.get(node);\r\n    const geometry = new THREE.BoxGeometry(\r\n      nodeData.data.size,\r\n      nodeData.data.size,\r\n      nodeData.data.size\r\n    );\r\n    geometry.name = node;\r\n    const nodeMesh = new THREE.Mesh(geometry, material);\r\n    nodeMesh.position.set(\r\n      nodeData.data.pos.x * bounds,\r\n      nodeData.data.pos.y * bounds,\r\n      nodeData.data.pos.z * bounds\r\n    );\r\n    group.add(nodeMesh);\r\n  }\r\n  return group;\r\n}\r\n\r\n// Draw BoxBased imaging from a graph\r\nfunction DrawTHREEBoxBasedVertices(graph, bounds){\r\n  const Bgroup = AddBoxBasedImaging(graph.nodes, bounds);\r\n  return Bgroup;\r\n}\r\n\r\n// draw cylinders where required\r\nfunction AddCylinderBasedImaging(vertexMap, divisonLength) {\r\n  // returns a group\r\n  const group = new THREE.Group();\r\n  const material = new THREE.MeshBasicMaterial({ color: 0xffffff });\r\n  let radius, circumfurence, segments;\r\n  for (const node of vertexMap.keys()) {\r\n    const nodeData = vertexMap.get(node);\r\n    radius = nodeData.data.size;\r\n    circumfurence = 2 * radius * Math.PI;\r\n    segments = Math.ceil(circumfurence / divisonLength);\r\n    const geometry = new THREE.CylinderGeometry(radius, radius, 10, segments);\r\n    geometry.name = node;\r\n    const nodeMesh = new THREE.Mesh(geometry, material);\r\n    nodeMesh.position.set(\r\n      nodeData.data.pos.x,\r\n      nodeData.data.pos.y,\r\n      nodeData.data.pos.z\r\n    );\r\n    group.add(nodeMesh);\r\n  }\r\n  return group;\r\n}\r\n\r\n// draw the sparse graph as groups\r\nasync function AddInModularityBasedPointGroups(Graph, modularityList) {\r\n  // returns an array of groups\r\n  const groups = new Map();\r\n  const otherNodes = [];\r\n  for (const node of Graph.nodes.keys()) {\r\n    const ndata = Graph.nodes.get(node);\r\n    const modularity = ndata.data.modularity;\r\n    if (modularityList.includes(modularity)) {\r\n      if (groups.has(modularity)) {\r\n        groups.get(modularity).push(node);\r\n      } else {\r\n        groups.set(modularity, [node]);\r\n      }\r\n    } else {\r\n      otherNodes.push(node);\r\n    }\r\n  }\r\n  // then counstruct a bunch of subraphs\r\n  const meshGraphVertices = new Map();\r\n  const meshGraphEdges = new Map();\r\n  // make a seperate group of nodes that have less than 2 neighbours\r\n  console.log(\"Now started the process of vertex subdivision\");\r\n  for (const modularityGroup of groups.keys()) {\r\n    const subgraphGroup = groups.get(modularityGroup);\r\n    // returns an array\r\n    const subgraph = await GraphMethods.SelectSubgraph(\r\n      Graph,\r\n      subgraphGroup\r\n    );\r\n    // then make the vertex thing\r\n    const meshRep = DrawTHREEGraphVertices(subgraph, 1);\r\n    meshGraphVertices.set(modularityGroup, meshRep);\r\n    // make the edges\r\n    const edges = DrawSimplifiedEdges(subgraph, 0.03);\r\n    meshGraphEdges.set(modularityGroup, edges);\r\n  }\r\n  // now for all the vertices in the \"other\" Nodes map add in the\r\n  // rest of the stuff for us to play around with\r\n  const OtherNodes = await GraphMethods.SelectSubgraph(Graph, otherNodes);\r\n  const LeafVertices = DrawTHREEGraphVertices(OtherNodes, 1);\r\n  const ROBJ = {\r\n    vertices: meshGraphVertices,\r\n    edges: meshGraphEdges,\r\n    leafs: LeafVertices,\r\n  };\r\n  return ROBJ;\r\n}\r\n\r\nfunction DrawSimplifiedEdges(G, amount) {\r\n  const lineGroup = new THREE.Group();\r\n  const material = new THREE.LineBasicMaterial({ color: 0x90e0ef });\r\n  for (const edge of G.edges.values()) {\r\n    if(Math.random()<=amount){\r\n      const start = G.nodes.get(edge.start).data.pos;\r\n      const end = G.nodes.get(edge.end).data.pos;\r\n      const points = [];\r\n      points.push(new THREE.Vector3(start.x, start.y, start.z));\r\n      points.push(new THREE.Vector3(end.x, end.y, end.z));\r\n      const geometry = new THREE.BufferGeometry().setFromPoints(points);\r\n      const line = new THREE.Line(geometry, material);\r\n      lineGroup.add(line);\r\n    }\r\n  }\r\n  return lineGroup;\r\n}\r\n\r\nfunction ChangeTheVertexColours(vertices, indexArray, color){\r\n  let Attrib = vertices.geometry.attributes;\r\n  let k = 0;\r\n  indexArray.forEach((node) => {\r\n    k = node * 3;\r\n    Attrib.customColor.array[k] = color.r;\r\n    Attrib.customColor.array[k + 1] = color.g;\r\n    Attrib.customColor.array[k + 2] = color.b;\r\n  })\r\n  Attrib.customColor.needsUpdate =true;  \r\n}\r\n\r\nfunction ResetVertexColors(vertices){\r\n  let Attrib = vertices.geometry.attributes;\r\n  let k = 0;\r\n  for (let i = 0; i < Attrib.customColor.count; i++) {\r\n    k = i*3;\r\n    Attrib.customColor.array[k] = 100;\r\n    Attrib.customColor.array[k + 1] = 237;\r\n    Attrib.customColor.array[k + 2] = 146;\r\n  }\r\n  Attrib.customColor.needsUpdate = true;\r\n}\r\n\r\nexport {\r\n  DrawTHREEGraphVertices,\r\n  DrawTHREEGraphEdgesThick,\r\n  DrawTHREEGraphEdgesThin,\r\n  AddBoxBasedImaging,\r\n  AddInModularityBasedPointGroups,\r\n  DrawThinEdgesFromEdgeMap,\r\n  DrawThickEdgesFromEdgeMap,\r\n  AddCylinderBasedImaging,\r\n  DrawSimplifiedEdges,\r\n  ChangeTheVertexColours,\r\n  ResetVertexColors,\r\n  DrawTHREEBoxBasedVertices\r\n};\r\n","import * as THREE from \"three\";\r\n\r\nclass MeshLine extends THREE.BufferGeometry {\r\n  constructor() {\r\n    super();\r\n    this.isMeshLine = true;\r\n    this.type = \"MeshLine\";\r\n\r\n    this.positions = [];\r\n\r\n    this.previous = [];\r\n    this.next = [];\r\n    this.side = [];\r\n    this.width = [];\r\n    this.indices_array = [];\r\n    this.uvs = [];\r\n    this.counters = [];\r\n    this._points = [];\r\n    this._geom = null;\r\n\r\n    this.widthCallback = null;\r\n\r\n    // Used to raycast\r\n    this.matrixWorld = new THREE.Matrix4();\r\n\r\n    Object.defineProperties(this, {\r\n      // this is now a bufferGeometry\r\n      // add getter to support previous api\r\n      geometry: {\r\n        enumerable: true,\r\n        get: function () {\r\n          return this;\r\n        },\r\n      },\r\n      geom: {\r\n        enumerable: true,\r\n        get: function () {\r\n          return this._geom;\r\n        },\r\n        set: function (value) {\r\n          this.setGeometry(value, this.widthCallback);\r\n        },\r\n      },\r\n      // for declaritive architectures\r\n      // to return the same value that sets the points\r\n      // eg. this.points = points\r\n      // console.log(this.points) -> points\r\n      points: {\r\n        enumerable: true,\r\n        get: function () {\r\n          return this._points;\r\n        },\r\n        set: function (value) {\r\n          this.setPoints(value, this.widthCallback);\r\n        },\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nMeshLine.prototype.setMatrixWorld = function (matrixWorld) {\r\n  this.matrixWorld = matrixWorld;\r\n};\r\n\r\n// setting via a geometry is rather superfluous\r\n// as you're creating a unecessary geometry just to throw away\r\n// but exists to support previous api\r\nMeshLine.prototype.setGeometry = function (g, c) {\r\n  // as the input geometry are mutated we store them\r\n  // for later retreival when necessary (declaritive architectures)\r\n  this._geometry = g;\r\n  this.setPoints(g.getAttribute(\"position\").array, c);\r\n};\r\n\r\nMeshLine.prototype.setPoints = function (points, wcb) {\r\n  if (!(points instanceof Float32Array) && !(points instanceof Array)) {\r\n    console.error(\r\n      \"ERROR: The BufferArray of points is not instancied correctly.\"\r\n    );\r\n    return;\r\n  }\r\n  // as the points are mutated we store them\r\n  // for later retreival when necessary (declaritive architectures)\r\n  this._points = points;\r\n  this.widthCallback = wcb;\r\n  this.positions = [];\r\n  this.counters = [];\r\n  if (points.length && points[0] instanceof THREE.Vector3) {\r\n    // could transform Vector3 array into the array used below\r\n    // but this approach will only loop through the array once\r\n    // and is more performant\r\n    for (var j = 0; j < points.length; j++) {\r\n      var p = points[j];\r\n      var c = j / points.length;\r\n      this.positions.push(p.x, p.y, p.z);\r\n      this.positions.push(p.x, p.y, p.z);\r\n      this.counters.push(c);\r\n      this.counters.push(c);\r\n    }\r\n  } else {\r\n    for (var j = 0; j < points.length; j += 3) {\r\n      var c = j / points.length;\r\n      this.positions.push(points[j], points[j + 1], points[j + 2]);\r\n      this.positions.push(points[j], points[j + 1], points[j + 2]);\r\n      this.counters.push(c);\r\n      this.counters.push(c);\r\n    }\r\n  }\r\n  this.process();\r\n};\r\n\r\nfunction MeshLineRaycast(raycaster, intersects) {\r\n  var inverseMatrix = new THREE.Matrix4();\r\n  var ray = new THREE.Ray();\r\n  var sphere = new THREE.Sphere();\r\n  var interRay = new THREE.Vector3();\r\n  var geometry = this.geometry;\r\n  // Checking boundingSphere distance to ray\r\n\r\n  if (!geometry.boundingSphere) geometry.computeBoundingSphere();\r\n  sphere.copy(geometry.boundingSphere);\r\n  sphere.applyMatrix4(this.matrixWorld);\r\n\r\n  if (raycaster.ray.intersectSphere(sphere, interRay) === false) {\r\n    return;\r\n  }\r\n\r\n  inverseMatrix.copy(this.matrixWorld).invert();\r\n  ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);\r\n\r\n  var vStart = new THREE.Vector3();\r\n  var vEnd = new THREE.Vector3();\r\n  var interSegment = new THREE.Vector3();\r\n  var step = this instanceof THREE.LineSegments ? 2 : 1;\r\n  var index = geometry.index;\r\n  var attributes = geometry.attributes;\r\n\r\n  if (index !== null) {\r\n    var indices = index.array;\r\n    var positions = attributes.position.array;\r\n    var widths = attributes.width.array;\r\n\r\n    for (var i = 0, l = indices.length - 1; i < l; i += step) {\r\n      var a = indices[i];\r\n      var b = indices[i + 1];\r\n\r\n      vStart.fromArray(positions, a * 3);\r\n      vEnd.fromArray(positions, b * 3);\r\n      var width =\r\n        widths[Math.floor(i / 3)] !== undefined ? widths[Math.floor(i / 3)] : 1;\r\n      var precision =\r\n        raycaster.params.Line.threshold + (this.material.lineWidth * width) / 2;\r\n      var precisionSq = precision * precision;\r\n\r\n      var distSq = ray.distanceSqToSegment(\r\n        vStart,\r\n        vEnd,\r\n        interRay,\r\n        interSegment\r\n      );\r\n\r\n      if (distSq > precisionSq) continue;\r\n\r\n      interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\r\n\r\n      var distance = raycaster.ray.origin.distanceTo(interRay);\r\n\r\n      if (distance < raycaster.near || distance > raycaster.far) continue;\r\n\r\n      intersects.push({\r\n        distance: distance,\r\n        // What do we want? intersection point on the ray or on the segment??\r\n        // point: raycaster.ray.at( distance ),\r\n        point: interSegment.clone().applyMatrix4(this.matrixWorld),\r\n        index: i,\r\n        face: null,\r\n        faceIndex: null,\r\n        object: this,\r\n      });\r\n      // make event only fire once\r\n      i = l;\r\n    }\r\n  }\r\n}\r\nMeshLine.prototype.raycast = MeshLineRaycast;\r\nMeshLine.prototype.compareV3 = function (a, b) {\r\n  var aa = a * 6;\r\n  var ab = b * 6;\r\n  return (\r\n    this.positions[aa] === this.positions[ab] &&\r\n    this.positions[aa + 1] === this.positions[ab + 1] &&\r\n    this.positions[aa + 2] === this.positions[ab + 2]\r\n  );\r\n};\r\n\r\nMeshLine.prototype.copyV3 = function (a) {\r\n  var aa = a * 6;\r\n  return [this.positions[aa], this.positions[aa + 1], this.positions[aa + 2]];\r\n};\r\n\r\nMeshLine.prototype.process = function () {\r\n  var l = this.positions.length / 6;\r\n\r\n  this.previous = [];\r\n  this.next = [];\r\n  this.side = [];\r\n  this.width = [];\r\n  this.indices_array = [];\r\n  this.uvs = [];\r\n\r\n  var w;\r\n\r\n  var v;\r\n  // initial previous points\r\n  if (this.compareV3(0, l - 1)) {\r\n    v = this.copyV3(l - 2);\r\n  } else {\r\n    v = this.copyV3(0);\r\n  }\r\n  this.previous.push(v[0], v[1], v[2]);\r\n  this.previous.push(v[0], v[1], v[2]);\r\n\r\n  for (var j = 0; j < l; j++) {\r\n    // sides\r\n    this.side.push(1);\r\n    this.side.push(-1);\r\n\r\n    // widths\r\n    if (this.widthCallback) w = this.widthCallback(j / (l - 1));\r\n    else w = 1;\r\n    this.width.push(w);\r\n    this.width.push(w);\r\n\r\n    // uvs\r\n    this.uvs.push(j / (l - 1), 0);\r\n    this.uvs.push(j / (l - 1), 1);\r\n\r\n    if (j < l - 1) {\r\n      // points previous to poisitions\r\n      v = this.copyV3(j);\r\n      this.previous.push(v[0], v[1], v[2]);\r\n      this.previous.push(v[0], v[1], v[2]);\r\n\r\n      // indices\r\n      var n = j * 2;\r\n      this.indices_array.push(n, n + 1, n + 2);\r\n      this.indices_array.push(n + 2, n + 1, n + 3);\r\n    }\r\n    if (j > 0) {\r\n      // points after poisitions\r\n      v = this.copyV3(j);\r\n      this.next.push(v[0], v[1], v[2]);\r\n      this.next.push(v[0], v[1], v[2]);\r\n    }\r\n  }\r\n\r\n  // last next point\r\n  if (this.compareV3(l - 1, 0)) {\r\n    v = this.copyV3(1);\r\n  } else {\r\n    v = this.copyV3(l - 1);\r\n  }\r\n  this.next.push(v[0], v[1], v[2]);\r\n  this.next.push(v[0], v[1], v[2]);\r\n\r\n  // redefining the attribute seems to prevent range errors\r\n  // if the user sets a differing number of vertices\r\n  if (\r\n    !this._attributes ||\r\n    this._attributes.position.count !== this.positions.length\r\n  ) {\r\n    this._attributes = {\r\n      position: new THREE.BufferAttribute(new Float32Array(this.positions), 3),\r\n      previous: new THREE.BufferAttribute(new Float32Array(this.previous), 3),\r\n      next: new THREE.BufferAttribute(new Float32Array(this.next), 3),\r\n      side: new THREE.BufferAttribute(new Float32Array(this.side), 1),\r\n      width: new THREE.BufferAttribute(new Float32Array(this.width), 1),\r\n      uv: new THREE.BufferAttribute(new Float32Array(this.uvs), 2),\r\n      index: new THREE.BufferAttribute(new Uint16Array(this.indices_array), 1),\r\n      counters: new THREE.BufferAttribute(new Float32Array(this.counters), 1),\r\n    };\r\n  } else {\r\n    this._attributes.position.copyArray(new Float32Array(this.positions));\r\n    this._attributes.position.needsUpdate = true;\r\n    this._attributes.previous.copyArray(new Float32Array(this.previous));\r\n    this._attributes.previous.needsUpdate = true;\r\n    this._attributes.next.copyArray(new Float32Array(this.next));\r\n    this._attributes.next.needsUpdate = true;\r\n    this._attributes.side.copyArray(new Float32Array(this.side));\r\n    this._attributes.side.needsUpdate = true;\r\n    this._attributes.width.copyArray(new Float32Array(this.width));\r\n    this._attributes.width.needsUpdate = true;\r\n    this._attributes.uv.copyArray(new Float32Array(this.uvs));\r\n    this._attributes.uv.needsUpdate = true;\r\n    this._attributes.index.copyArray(new Uint16Array(this.indices_array));\r\n    this._attributes.index.needsUpdate = true;\r\n  }\r\n\r\n  this.setAttribute(\"position\", this._attributes.position);\r\n  this.setAttribute(\"previous\", this._attributes.previous);\r\n  this.setAttribute(\"next\", this._attributes.next);\r\n  this.setAttribute(\"side\", this._attributes.side);\r\n  this.setAttribute(\"width\", this._attributes.width);\r\n  this.setAttribute(\"uv\", this._attributes.uv);\r\n  this.setAttribute(\"counters\", this._attributes.counters);\r\n\r\n  this.setIndex(this._attributes.index);\r\n\r\n  this.computeBoundingSphere();\r\n  this.computeBoundingBox();\r\n};\r\n\r\nfunction memcpy(src, srcOffset, dst, dstOffset, length) {\r\n  var i;\r\n\r\n  src = src.subarray || src.slice ? src : src.buffer;\r\n  dst = dst.subarray || dst.slice ? dst : dst.buffer;\r\n\r\n  src = srcOffset\r\n    ? src.subarray\r\n      ? src.subarray(srcOffset, length && srcOffset + length)\r\n      : src.slice(srcOffset, length && srcOffset + length)\r\n    : src;\r\n\r\n  if (dst.set) {\r\n    dst.set(src, dstOffset);\r\n  } else {\r\n    for (i = 0; i < src.length; i++) {\r\n      dst[i + dstOffset] = src[i];\r\n    }\r\n  }\r\n\r\n  return dst;\r\n}\r\n\r\n/**\r\n * Fast method to advance the line by one position.  The oldest position is removed.\r\n * @param position\r\n */\r\nMeshLine.prototype.advance = function (position) {\r\n  var positions = this._attributes.position.array;\r\n  var previous = this._attributes.previous.array;\r\n  var next = this._attributes.next.array;\r\n  var l = positions.length;\r\n\r\n  // PREVIOUS\r\n  memcpy(positions, 0, previous, 0, l);\r\n\r\n  // POSITIONS\r\n  memcpy(positions, 6, positions, 0, l - 6);\r\n\r\n  positions[l - 6] = position.x;\r\n  positions[l - 5] = position.y;\r\n  positions[l - 4] = position.z;\r\n  positions[l - 3] = position.x;\r\n  positions[l - 2] = position.y;\r\n  positions[l - 1] = position.z;\r\n\r\n  // NEXT\r\n  memcpy(positions, 6, next, 0, l - 6);\r\n\r\n  next[l - 6] = position.x;\r\n  next[l - 5] = position.y;\r\n  next[l - 4] = position.z;\r\n  next[l - 3] = position.x;\r\n  next[l - 2] = position.y;\r\n  next[l - 1] = position.z;\r\n\r\n  this._attributes.position.needsUpdate = true;\r\n  this._attributes.previous.needsUpdate = true;\r\n  this._attributes.next.needsUpdate = true;\r\n};\r\n\r\nTHREE.ShaderChunk[\"meshline_vert\"] = [\r\n  \"\",\r\n  THREE.ShaderChunk.logdepthbuf_pars_vertex,\r\n  THREE.ShaderChunk.fog_pars_vertex,\r\n  \"\",\r\n  \"attribute vec3 previous;\",\r\n  \"attribute vec3 next;\",\r\n  \"attribute float side;\",\r\n  \"attribute float width;\",\r\n  \"attribute float counters;\",\r\n  \"\",\r\n  \"uniform vec2 resolution;\",\r\n  \"uniform float lineWidth;\",\r\n  \"uniform vec3 color;\",\r\n  \"uniform float opacity;\",\r\n  \"uniform float sizeAttenuation;\",\r\n  \"\",\r\n  \"varying vec2 vUV;\",\r\n  \"varying vec4 vColor;\",\r\n  \"varying float vCounters;\",\r\n  \"\",\r\n  \"vec2 fix( vec4 i, float aspect ) {\",\r\n  \"\",\r\n  \"    vec2 res = i.xy / i.w;\",\r\n  \"    res.x *= aspect;\",\r\n  \"\t vCounters = counters;\",\r\n  \"    return res;\",\r\n  \"\",\r\n  \"}\",\r\n  \"\",\r\n  \"void main() {\",\r\n  \"\",\r\n  \"    float aspect = resolution.x / resolution.y;\",\r\n  \"\",\r\n  \"    vColor = vec4( color, opacity );\",\r\n  \"    vUV = uv;\",\r\n  \"\",\r\n  \"    mat4 m = projectionMatrix * modelViewMatrix;\",\r\n  \"    vec4 finalPosition = m * vec4( position, 1.0 );\",\r\n  \"    vec4 prevPos = m * vec4( previous, 1.0 );\",\r\n  \"    vec4 nextPos = m * vec4( next, 1.0 );\",\r\n  \"\",\r\n  \"    vec2 currentP = fix( finalPosition, aspect );\",\r\n  \"    vec2 prevP = fix( prevPos, aspect );\",\r\n  \"    vec2 nextP = fix( nextPos, aspect );\",\r\n  \"\",\r\n  \"    float w = lineWidth * width;\",\r\n  \"\",\r\n  \"    vec2 dir;\",\r\n  \"    if( nextP == currentP ) dir = normalize( currentP - prevP );\",\r\n  \"    else if( prevP == currentP ) dir = normalize( nextP - currentP );\",\r\n  \"    else {\",\r\n  \"        vec2 dir1 = normalize( currentP - prevP );\",\r\n  \"        vec2 dir2 = normalize( nextP - currentP );\",\r\n  \"        dir = normalize( dir1 + dir2 );\",\r\n  \"\",\r\n  \"        vec2 perp = vec2( -dir1.y, dir1.x );\",\r\n  \"        vec2 miter = vec2( -dir.y, dir.x );\",\r\n  \"        //w = clamp( w / dot( miter, perp ), 0., 4. * lineWidth * width );\",\r\n  \"\",\r\n  \"    }\",\r\n  \"\",\r\n  \"    //vec2 normal = ( cross( vec3( dir, 0. ), vec3( 0., 0., 1. ) ) ).xy;\",\r\n  \"    vec4 normal = vec4( -dir.y, dir.x, 0., 1. );\",\r\n  \"    normal.xy *= .5 * w;\",\r\n  \"    normal *= projectionMatrix;\",\r\n  \"    if( sizeAttenuation == 0. ) {\",\r\n  \"        normal.xy *= finalPosition.w;\",\r\n  \"        normal.xy /= ( vec4( resolution, 0., 1. ) * projectionMatrix ).xy;\",\r\n  \"    }\",\r\n  \"\",\r\n  \"    finalPosition.xy += normal.xy * side;\",\r\n  \"\",\r\n  \"    gl_Position = finalPosition;\",\r\n  \"\",\r\n  THREE.ShaderChunk.logdepthbuf_vertex,\r\n  THREE.ShaderChunk.fog_vertex &&\r\n    \"    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\r\n  THREE.ShaderChunk.fog_vertex,\r\n  \"}\",\r\n].join(\"\\n\");\r\n\r\nTHREE.ShaderChunk[\"meshline_frag\"] = [\r\n  \"\",\r\n  THREE.ShaderChunk.fog_pars_fragment,\r\n  THREE.ShaderChunk.logdepthbuf_pars_fragment,\r\n  \"\",\r\n  \"uniform sampler2D map;\",\r\n  \"uniform sampler2D alphaMap;\",\r\n  \"uniform float useMap;\",\r\n  \"uniform float useAlphaMap;\",\r\n  \"uniform float useDash;\",\r\n  \"uniform float dashArray;\",\r\n  \"uniform float dashOffset;\",\r\n  \"uniform float dashRatio;\",\r\n  \"uniform float visibility;\",\r\n  \"uniform float alphaTest;\",\r\n  \"uniform vec2 repeat;\",\r\n  \"\",\r\n  \"varying vec2 vUV;\",\r\n  \"varying vec4 vColor;\",\r\n  \"varying float vCounters;\",\r\n  \"\",\r\n  \"void main() {\",\r\n  \"\",\r\n  THREE.ShaderChunk.logdepthbuf_fragment,\r\n  \"\",\r\n  \"    vec4 c = vColor;\",\r\n  \"    if( useMap == 1. ) c *= texture2D( map, vUV * repeat );\",\r\n  \"    if( useAlphaMap == 1. ) c.a *= texture2D( alphaMap, vUV * repeat ).a;\",\r\n  \"    if( c.a < alphaTest ) discard;\",\r\n  \"    if( useDash == 1. ){\",\r\n  \"        c.a *= ceil(mod(vCounters + dashOffset, dashArray) - (dashArray * dashRatio));\",\r\n  \"    }\",\r\n  \"    gl_FragColor = c;\",\r\n  \"    gl_FragColor.a *= step(vCounters, visibility);\",\r\n  \"\",\r\n  THREE.ShaderChunk.fog_fragment,\r\n  \"}\",\r\n].join(\"\\n\");\r\n\r\nclass MeshLineMaterial extends THREE.ShaderMaterial {\r\n  constructor(parameters) {\r\n    super({\r\n      uniforms: Object.assign({}, THREE.UniformsLib.fog, {\r\n        lineWidth: { value: 1 },\r\n        map: { value: null },\r\n        useMap: { value: 0 },\r\n        alphaMap: { value: null },\r\n        useAlphaMap: { value: 0 },\r\n        color: { value: new THREE.Color(0xffffff) },\r\n        opacity: { value: 1 },\r\n        resolution: { value: new THREE.Vector2(1, 1) },\r\n        sizeAttenuation: { value: 1 },\r\n        dashArray: { value: 0 },\r\n        dashOffset: { value: 0 },\r\n        dashRatio: { value: 0.5 },\r\n        useDash: { value: 0 },\r\n        visibility: { value: 1 },\r\n        alphaTest: { value: 0 },\r\n        repeat: { value: new THREE.Vector2(1, 1) },\r\n      }),\r\n\r\n      vertexShader: THREE.ShaderChunk.meshline_vert,\r\n\r\n      fragmentShader: THREE.ShaderChunk.meshline_frag,\r\n    });\r\n    this.isMeshLineMaterial = true;\r\n    this.type = \"MeshLineMaterial\";\r\n\r\n    Object.defineProperties(this, {\r\n      lineWidth: {\r\n        enumerable: true,\r\n        get: function () {\r\n          return this.uniforms.lineWidth.value;\r\n        },\r\n        set: function (value) {\r\n          this.uniforms.lineWidth.value = value;\r\n        },\r\n      },\r\n      map: {\r\n        enumerable: true,\r\n        get: function () {\r\n          return this.uniforms.map.value;\r\n        },\r\n        set: function (value) {\r\n          this.uniforms.map.value = value;\r\n        },\r\n      },\r\n      useMap: {\r\n        enumerable: true,\r\n        get: function () {\r\n          return this.uniforms.useMap.value;\r\n        },\r\n        set: function (value) {\r\n          this.uniforms.useMap.value = value;\r\n        },\r\n      },\r\n      alphaMap: {\r\n        enumerable: true,\r\n        get: function () {\r\n          return this.uniforms.alphaMap.value;\r\n        },\r\n        set: function (value) {\r\n          this.uniforms.alphaMap.value = value;\r\n        },\r\n      },\r\n      useAlphaMap: {\r\n        enumerable: true,\r\n        get: function () {\r\n          return this.uniforms.useAlphaMap.value;\r\n        },\r\n        set: function (value) {\r\n          this.uniforms.useAlphaMap.value = value;\r\n        },\r\n      },\r\n      color: {\r\n        enumerable: true,\r\n        get: function () {\r\n          return this.uniforms.color.value;\r\n        },\r\n        set: function (value) {\r\n          this.uniforms.color.value = value;\r\n        },\r\n      },\r\n      opacity: {\r\n        enumerable: true,\r\n        get: function () {\r\n          return this.uniforms.opacity.value;\r\n        },\r\n        set: function (value) {\r\n          this.uniforms.opacity.value = value;\r\n        },\r\n      },\r\n      resolution: {\r\n        enumerable: true,\r\n        get: function () {\r\n          return this.uniforms.resolution.value;\r\n        },\r\n        set: function (value) {\r\n          this.uniforms.resolution.value.copy(value);\r\n        },\r\n      },\r\n      sizeAttenuation: {\r\n        enumerable: true,\r\n        get: function () {\r\n          return this.uniforms.sizeAttenuation.value;\r\n        },\r\n        set: function (value) {\r\n          this.uniforms.sizeAttenuation.value = value;\r\n        },\r\n      },\r\n      dashArray: {\r\n        enumerable: true,\r\n        get: function () {\r\n          return this.uniforms.dashArray.value;\r\n        },\r\n        set: function (value) {\r\n          this.uniforms.dashArray.value = value;\r\n          this.useDash = value !== 0 ? 1 : 0;\r\n        },\r\n      },\r\n      dashOffset: {\r\n        enumerable: true,\r\n        get: function () {\r\n          return this.uniforms.dashOffset.value;\r\n        },\r\n        set: function (value) {\r\n          this.uniforms.dashOffset.value = value;\r\n        },\r\n      },\r\n      dashRatio: {\r\n        enumerable: true,\r\n        get: function () {\r\n          return this.uniforms.dashRatio.value;\r\n        },\r\n        set: function (value) {\r\n          this.uniforms.dashRatio.value = value;\r\n        },\r\n      },\r\n      useDash: {\r\n        enumerable: true,\r\n        get: function () {\r\n          return this.uniforms.useDash.value;\r\n        },\r\n        set: function (value) {\r\n          this.uniforms.useDash.value = value;\r\n        },\r\n      },\r\n      visibility: {\r\n        enumerable: true,\r\n        get: function () {\r\n          return this.uniforms.visibility.value;\r\n        },\r\n        set: function (value) {\r\n          this.uniforms.visibility.value = value;\r\n        },\r\n      },\r\n      alphaTest: {\r\n        enumerable: true,\r\n        get: function () {\r\n          return this.uniforms.alphaTest.value;\r\n        },\r\n        set: function (value) {\r\n          this.uniforms.alphaTest.value = value;\r\n        },\r\n      },\r\n      repeat: {\r\n        enumerable: true,\r\n        get: function () {\r\n          return this.uniforms.repeat.value;\r\n        },\r\n        set: function (value) {\r\n          this.uniforms.repeat.value.copy(value);\r\n        },\r\n      },\r\n    });\r\n\r\n    this.setValues(parameters);\r\n  }\r\n}\r\n\r\nMeshLineMaterial.prototype.copy = function (source) {\r\n  THREE.ShaderMaterial.prototype.copy.call(this, source);\r\n\r\n  this.lineWidth = source.lineWidth;\r\n  this.map = source.map;\r\n  this.useMap = source.useMap;\r\n  this.alphaMap = source.alphaMap;\r\n  this.useAlphaMap = source.useAlphaMap;\r\n  this.color.copy(source.color);\r\n  this.opacity = source.opacity;\r\n  this.resolution.copy(source.resolution);\r\n  this.sizeAttenuation = source.sizeAttenuation;\r\n  this.dashArray.copy(source.dashArray);\r\n  this.dashOffset.copy(source.dashOffset);\r\n  this.dashRatio.copy(source.dashRatio);\r\n  this.useDash = source.useDash;\r\n  this.visibility = source.visibility;\r\n  this.alphaTest = source.alphaTest;\r\n  this.repeat.copy(source.repeat);\r\n\r\n  return this;\r\n};\r\n\r\nexport { MeshLine, MeshLineMaterial, MeshLineRaycast };\r\n","const vertexShader = `\r\nattribute float size;\r\nattribute vec3 customColor;\r\n\r\nvarying vec3 vColor;\r\n\r\nvoid main() {\r\n    vColor = customColor;\r\n    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n    gl_PointSize = size * ( 300.0 / -mvPosition.z );\r\n    gl_Position = projectionMatrix * mvPosition;\r\n}\r\n`\r\n\r\nexport {vertexShader};","const fragmentShader = `\r\nuniform vec3 color;\r\nuniform sampler2D pointTexture;\r\nuniform float alphaTest;\r\n\r\nvarying vec3 vColor;\r\n\r\nvoid main() {\r\n    gl_FragColor = vec4( color * vColor, 1.0 );\r\n    gl_FragColor = gl_FragColor * texture2D( pointTexture, gl_PointCoord );\r\n    if ( gl_FragColor.a < alphaTest ) discard;\r\n}\r\n`;\r\n\r\nexport { fragmentShader };\r\n","import * as THREE from \"three\";\r\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\r\nimport * as PGLTHREEWrapper from \"./ThreeJSDrawer.js\";\r\n\r\n// this is the 3d graph drawing class with three js\r\nclass GraphDrawer3d {\r\n  constructor(GraphDrawerOptions3d, graphs) {\r\n    this.canvas = GraphDrawerOptions3d.canvas;\r\n    this.width = GraphDrawerOptions3d.width;\r\n    this.height = GraphDrawerOptions3d.height;\r\n    this.geometryMap = new Map();\r\n    this.materialMap = new Map();\r\n    this.meshMap = new Map();\r\n    this.controls;\r\n    this.renderer;\r\n    this.camera;\r\n    this.scene;\r\n    // bounds is a global parameter that we change (think about this as scale)\r\n    this.bound = GraphDrawerOptions3d.bounds;\r\n    // graph map is the hash map that holds all the\r\n    // graphs that we are working with together\r\n    this.graphs = new Map();\r\n    // add the default graph to the graph map\r\n    for (let i = 0; i < graphs.length; i++) {\r\n      const g = graphs[i];\r\n      this.graphs.set(i, g)\r\n    }\r\n  }\r\n\r\n  async init() {\r\n    const t1 = performance.now();\r\n\r\n    this.camera = new THREE.PerspectiveCamera();\r\n\r\n    // start up a new scene\r\n    this.scene = new THREE.Scene();\r\n\r\n    // set up a renderer\r\n    this.renderer = new THREE.WebGLRenderer({canvas:this.canvas, antialias:true});\r\n    this.renderer.setSize(this.width, this.height);\r\n    this.renderer.setClearColor(0xff00ff, 0);\r\n\r\n    // add in a light\r\n    this.scene.add(new THREE.AmbientLight(0xffffff));\r\n    // add a spotlight \r\n    const DirectionalLight = new THREE.DirectionalLight(0xffffff, 1);\r\n    DirectionalLight.position.set(0, 10, 0);\r\n    this.scene.add(DirectionalLight);\r\n\r\n\r\n    // set up the control system\r\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\r\n    this.camera.position.set(0, 100, 100);\r\n    this.controls.autoRotate = true;\r\n    this.controls.maxPolarAngle = Math.PI * 0.5;\r\n    this.camera.enableDamping = true;\r\n    this.controls.maxDistance = 1000;\r\n    this.controls.minDistance = 10;\r\n    this.controls.update();\r\n\r\n    // add in the graph that we wanted this.graphs.get('ProvidedGraph')\r\n    for (const graph of this.graphs.keys()) {\r\n      const GeoGraph = PGLTHREEWrapper.DrawTHREEBoxBasedVertices(this.graphs.get(graph), this.bound);\r\n      this.scene.add(GeoGraph);\r\n      const ThickEdges = PGLTHREEWrapper.DrawTHREEGraphEdgesThick(this.graphs.get(graph), this.bound);\r\n      this.scene.add(ThickEdges);\r\n    }\r\n\r\n    // edges \r\n\r\n\r\n    // finally print out that the initialization has finished\r\n    const t2 = performance.now();\r\n    console.log(\"initialization has finished\");\r\n    console.log(`Time to initialize ${t2 - t1} milliseconds`);\r\n  }\r\n\r\n  // this stuff renders out one specific instances\r\n  rendercall() {\r\n    // this is the render draw call\r\n    this.renderer.render(this.scene, this.camera);\r\n    this.controls.update();\r\n  }\r\n}\r\n\r\n\r\nexport {\r\n    GraphDrawer3d,\r\n}"],"names":[],"version":3,"file":"pgl.js.map"}