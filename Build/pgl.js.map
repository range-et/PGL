{"mappings":"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aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAAC,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C,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,aAAC;SAAC;QACN;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,aAAC;AAAE,cAAE;SAAC;QACP;AAAC,cAAE;AAAE,cAAE;SAAC;QACR;AAA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","sources":["Src/Drawing/Drawing.js","Src/HelperClasses/Utilities.js","Src/HelperClasses/GeometryHelpers.js","Src/HelperClasses/Point.js","Src/HelperClasses/Line.js","Src/GraphAlgorithms/GraphMethods.js","Src/Core/Graph.js","Src/index.js","Src/SampleData/DataLoader.js","Src/SampleData/ZKC.js","Src/SampleData/ZKC_simulated.js","Src/HelperClasses/GraphConstructors.js","Src/Core/Vertex.js","Src/Core/Edges.js","Src/Drawing/ThreeJSDrawer.js","Src/Shaders/vertexShader.glsl.js","Src/Shaders/fragmentShader.glsl.js","Src/Drawing/GraphDawer.js"],"sourcesContent":["import Utilities from \"../HelperClasses/Utilities.js\";\nimport GeometryHelpers from \"../HelperClasses/GeometryHelpers.js\";\nimport { Point } from \"../HelperClasses/Point.js\";\nimport GraphMethods from \"../GraphAlgorithms/GraphMethods.js\";\n\n// draw kamada kawai\nasync function SimulateKamadaKawai(G, iterations) {\n  const adjList = G.get_adjacency();\n  // pos map\n  const PosMapX = new Map();\n  const PosMapY = new Map();\n  let rx, ry;\n  for (const node of adjList.keys()) {\n    rx = Math.random() * 200;\n    ry = Math.random() * 200;\n    PosMapX.set(node, rx);\n    PosMapY.set(node, ry);\n  }\n  // start simulation\n  for (let i = 0; i < iterations; i++) {\n    // calculate the clustering force\n    for (const node of adjList.keys()) {\n      // this chunk is for the attraction force\n      // get the node pos\n      const neighbours = adjList.get(node);\n      // get the set of x's\n      const x_s = [];\n      // get the set of y's\n      const y_s = [];\n      // now iterate through the pos list and append\n      neighbours.forEach((n_s) => {\n        const n_pos_x = PosMapX.get(n_s);\n        const n_pos_y = PosMapY.get(n_s);\n        x_s.push(n_pos_x);\n        y_s.push(n_pos_y);\n      });\n      // now average out the values\n      const new_c_xpos = Utilities.calculateAverage(x_s);\n      const new_c_ypos = Utilities.calculateAverage(y_s);\n\n      // this chunk is for the repelling force\n      const x_r = [];\n      const y_r = [];\n      // then find the element\n      for (const otherNode of G.nodes.keys()) {\n        // get the position of all the other nodes\n        if (otherNode != node) {\n          // calculate inverse distance\n          const distDiffX = PosMapX.get(otherNode) - PosMapX.get(node);\n          const distDiffY = PosMapY.get(otherNode) - PosMapY.get(node);\n          // get the inverse square value\n          // add that to the *_r arrays\n          x_r.push(distDiffX);\n          y_r.push(distDiffY);\n        }\n      }\n      // this is the repulsion value\n      const A_mult = 2;\n      const new_x_r_pos = (A_mult * 1) / (Utilities.calculateAverage(x_r)*Utilities.calculateAverage(x_r));\n      const new_y_r_pos = (A_mult * 1) / (Utilities.calculateAverage(y_r)*Utilities.calculateAverage(y_r));\n\n      // calculate the dispacement amount in c/y pos\n      // this is the cohesion value\n      const C_mult = 1;\n      const new_c_xpos_dispacement = C_mult * (new_c_xpos - PosMapX.get(node));\n      const new_c_ypos_dispacement = C_mult * (new_c_ypos - PosMapY.get(node));\n\n      // then add the x and y components of the two vectors\n      const new_xpos = new_x_r_pos + new_c_xpos_dispacement + PosMapX.get(node);\n      const new_ypos = new_y_r_pos + new_c_ypos_dispacement + PosMapY.get(node);\n\n      // now set these positions\n      PosMapX.set(node, new_xpos);\n      PosMapY.set(node, new_ypos);\n    }\n  }\n  // return the position\n  let PosMap = new Map();\n  for (const p of PosMapX.keys()) {\n    PosMap.set(p, new Point(PosMapX.get(p), 0, PosMapY.get(p)));\n  }\n  // get / set positions\n  // move the points\n  // get the average pos\n  const sim_x = [];\n  const sim_y = [];\n  const sim_z = [];\n  let interimPoint;\n  for (const p of PosMap.keys()) {\n    interimPoint = PosMap.get(p);\n    sim_x.push(interimPoint.x);\n    sim_y.push(interimPoint.y);\n    sim_z.push(interimPoint.z);\n  }\n\n  const x_displacement = calculateAverage(sim_x);\n  const y_displacement = calculateAverage(sim_y);\n  const z_displacement = calculateAverage(sim_z);\n  const dispacementVector = new Point(\n    -x_displacement,\n    -y_displacement,\n    -z_displacement\n  );\n\n  PosMap = movePmap(PosMap, dispacementVector);\n\n  G.apply_position_map(PosMap);\n  const lmap = DrawEdgeLines(G, 1);\n  const newLmap = await DrawEdgeBundling(lmap, 12, 5);\n  return { pmap: PosMap, emap: newLmap.emap };\n}\n\n// instanciate a random set of positions \nfunction InstanciateRandomPositions(G){\n  const adjList = G.get_adjacency();\n  const PosMapX = new Map();\n  const PosMapY = new Map();\n  for (const node of adjList.keys()) {\n    PosMapX.set(node, Math.random() * 200);\n    PosMapY.set(node, Math.random() * 200);\n  }\n  let PosMap = new Map();\n  for (const p of PosMapX.keys()) {\n    PosMap.set(p, new Point(PosMapX.get(p), 0, PosMapY.get(p)));\n  }\n  G.apply_position_map(PosMap);\n  const lmap = DrawEdgeLines(G, 1);\n  return { pmap: PosMap, emap: lmap };\n}\n\n// draw the edge representations and then store them in the edge classes\nfunction DrawEdgeLines(G, divDistance) {\n  // this is the return map\n  const lineMap = new Map();\n  for (const key of G.edges.keys()) {\n    const edge = G.edges.get(key);\n    // get the start pos\n    const start = G.nodes.get(edge.start).data.pos;\n    const end = G.nodes.get(edge.end).data.pos;\n    const Line = GeometryHelpers.line_from_start_end_distance(start, end, divDistance);\n    lineMap.set(key, Line);\n  }\n  return lineMap;\n}\n\n// update edge lines after moving points or something \nfunction UpdateEdgeLinesDist(G, divDistance){\n  let edge, start, end, line;\n  for (const key of G.edges.keys()) {\n    edge = G.edges.get(key);\n    // get the start pos\n    start = G.nodes.get(edge.start).data.pos;\n    end = G.nodes.get(edge.end).data.pos;\n    line = GeometryHelpers.line_from_start_end_distance(start, end, divDistance);\n    edge.data.ldata = line;\n  }\n}\n\n// function Update EdgeLines based on the number of divisions \nfunction UpdateEdgeLinesDivs(G, Divs){\n  let edge, start, end, line;\n  for (const key of G.edges.keys()) {\n    edge = G.edges.get(key);\n    // get the start pos\n    start = G.nodes.get(edge.start).data.pos;\n    end = G.nodes.get(edge.end).data.pos;\n    line = GeometryHelpers.line_from_start_end_divisions(start, end, Divs);\n    edge.data.ldata = line;\n  }\n}\n\n// now draw out the edge bundling thing\nasync function DrawEdgeBundling(LineMap, iterations, distance) {\n  const returnArray = LineMap;\n  // run it for whatever number of iterations\n  for (let i = 0; i < iterations; i++) {\n    // then iterate through every line\n    for (const key of returnArray.keys()) {\n      // then get the line that we are working with\n      const line = returnArray.get(key).data.ldata;\n      // then for each point in the line we have to move it closer to the other points\n      for (let ii = 1; ii < line.points.length - 1; ii++) {\n        // then get the point that we need to work with\n        const x_s = [];\n        const y_s = [];\n        const z_s = [];\n        const pnt = line.points[ii];\n        // then run the point accumulation algoritm\n        for (const otherKey of returnArray.keys()) {\n          if (otherKey != key) {\n            // then get the other line\n            const otherLine = returnArray.get(otherKey).data.ldata;\n            for (let iii = 1; iii < otherLine.points.length - 1; iii++) {\n              const otherpoint = otherLine.points[iii];\n              const d = Utilities.calculateSquaredDistance(pnt, otherpoint);\n              if (d <= Math.pow(distance, 2)) {\n                const x_d = otherpoint.x - pnt.x;\n                const y_d = otherpoint.y - pnt.y;\n                const z_d = otherpoint.z - pnt.z;\n                x_s.push(x_d);\n                y_s.push(y_d);\n                z_s.push(z_d);\n              }\n            }\n          }\n        }\n        // now create a new displacement amount\n        const avgx = pnt.x + 0.8 * (Utilities.calculateAverage(x_s) || 0);\n        const avgy = pnt.y + 0.8 * (Utilities.calculateAverage(y_s) || 0);\n        const avgz = pnt.z + 0.8 * (Utilities.calculateAverage(z_s) || 0);\n        const newPoint = new Point(avgx, avgy, avgz);\n        line.points[ii] = newPoint;\n      }\n    }\n  }\n  // now return that array\n  return { emap: returnArray };\n}\n\n// displace the th edges\nfunction DisplaceEdgeInY(LineMap, displacement) {\n  for (const key of LineMap.keys()) {\n    const line = LineMap.get(key);\n    // now for all the points in this\n    let pnt, ydisval; \n    for (let i = 0; i < line.data.ldata.points.length; i++) {\n      pnt = line.data.ldata.points[i];\n      ydisval = displacement*Math.sin((Math.PI * i)/(line.data.ldata.points.length-1));\n      pnt.y = pnt.y + ydisval;\n    }\n  }\n}\n\n// displace the graph by some measure \nfunction DisplaceVertices(nodeMap, parameter, displacement){\n  let max = 0;\n  let value, ydisplacement;\n  // go through the thing and set the min max values \n  for(const node of nodeMap.values()){\n    value = eval(\"node.data.\"+parameter);\n    if(value >= max){\n      max = value;\n    }\n  }\n  // go through the nodes again and set the values \n  for(const node of nodeMap.values()){\n    value = eval(\"node.data.\"+parameter);\n    ydisplacement = ((value/max)*displacement);\n    // now filter the values so that we know that the values are between a max and a min\n    ydisplacement = Math.max(0, ydisplacement); // this sets the lower bound to be something \n    ydisplacement = Math.min(displacement, ydisplacement); // this sets the upper bound of the thing\n    node.data.pos.y = ydisplacement;\n  }\n}\n\n// draw the circular vertical packing crypto like drawing\nasync function HivePlot(G, selectedNode, step, startP) {\n  const adj = G.get_adjacency();\n  const DijkstraDepth = await GraphMethods.Dijkstra(G, selectedNode);\n  // calculate the number of steps that I am searching through\n  const steps = Math.max(...[...DijkstraDepth.values()]);\n  // step map\n  const stepMap = new Map();\n  // now create a stepped ring of stuff\n  for (let i = 0; i <= steps; i++) {\n    const ntier = [];\n    for (const nkey of DijkstraDepth.keys()) {\n      if (i == DijkstraDepth.get(nkey)) {\n        ntier.push(nkey);\n      }\n    }\n    stepMap.set(i, ntier);\n  }\n  // the returning pos map\n  const Pmap = new Map();\n  // now find the relevant node Positions\n  // get the start positions\n  const xoff = startP.x || 0;\n  const yoff = startP.y || 0;\n  const zoff = startP.z || 0;\n  // set the positions\n  for (const node of adj.keys()) {\n    const yval = DijkstraDepth.get(node) * step;\n    const depthArr = stepMap.get(DijkstraDepth.get(node));\n    const angle = 2 * Math.PI * (depthArr.indexOf(node) / depthArr.length);\n    const xval = Math.sin(angle) * yval;\n    const zval = Math.cos(angle) * yval;\n    // construct a new point\n    const pnt = new Point(xval + xoff, -yval + yoff, zval + zoff);\n    Pmap.set(node, pnt);\n  }\n  // simulate the lines\n  G.apply_position_map(Pmap);\n  const lmap = DrawEdgeLines(G, 1);\n  const newLmap = await DrawEdgeBundling(lmap, 12, 5);\n  return { pmap: Pmap, emap: newLmap.emap };\n}\n\n// move graph\nfunction MoveGraph(G, dispacement) {\n  const Pmap  = G.get_position_map();\n  const NewPmap = MovePmap(Pmap, dispacement);\n  G.apply_position_map(NewPmap);\n}\n\n// move pmap\nfunction MovePmap(Pmap, displacement) {\n  const newPmap = new Map();\n  for (const node of Pmap.keys()) {\n    const p = Pmap.get(node);\n    p.translate(displacement);\n    newPmap.set(node, p);\n  }\n  return newPmap;\n}\n\nexport default {\n  SimulateKamadaKawai,\n  DrawEdgeLines,\n  DrawEdgeBundling,\n  HivePlot,\n  DisplaceEdgeInY,\n  MoveGraph,\n  InstanciateRandomPositions,\n  DisplaceVertices,\n  UpdateEdgeLinesDist,\n  UpdateEdgeLinesDivs,\n};\n","// Calculate average\nfunction calculateAverage(arr) {\n  let runningSum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    runningSum = runningSum + arr[i];\n  }\n  const avg = runningSum / arr.length;\n  return avg;\n}\n\n// calculate distance between two points\nfunction calculateDistance(p1, p2) {\n  const d = Math.pow(\n    Math.pow(p1.x - p2.x, 2) +\n      Math.pow(p1.y - p2.y, 2) +\n      Math.pow(p1.z - p2.z, 2),\n    0.5\n  );\n  return d;\n}\n\nfunction calculateSquaredDistance(p1, p2) {\n  const d =\n    Math.pow(p1.x - p2.x, 2) +\n    Math.pow(p1.y - p2.y, 2) +\n    Math.pow(p1.z - p2.z, 2);\n  return d;\n}\n\nfunction getRandomSubset(arr, n) {\n  var result = new Array(n),\n      len = arr.length,\n      taken = new Array(len);\n  if (n > len)\n      throw new RangeError(\"getRandom: more elements taken than available\");\n  while (n--) {\n      var x = Math.floor(Math.random() * len);\n      result[n] = arr[x in taken ? taken[x] : x];\n      taken[x] = --len in taken ? taken[len] : len;\n  }\n  return result;\n}\n\nexport default { calculateAverage, calculateDistance, calculateSquaredDistance, getRandomSubset};\n","import {Point} from \"./Point.js\";\nimport {Line} from \"./Line.js\";\nimport Utilities from \"./Utilities.js\";\n\nfunction line_from_start_end_divisions(start, end, divisions){\n    // create a start and end time \n    const Start = new Point(start.x, start.y, start.z);\n    const End = new Point(end.x, end.y, end.z);\n    // interpolated points\n    const points = [];\n    // divisions \n    for (let i = 0; i <= divisions;i++) {\n        const interVar = i/divisions;\n        const newx = interVar*Start.x + (1-interVar)*End.x;\n        const newy = interVar*Start.y + (1-interVar)*End.y;\n        const newz = interVar*Start.z + (1-interVar)*End.z;\n        const newPoint = new Point(newx, newy, newz);\n        points.push(newPoint);\n    }\n    // create a new point \n    const SubdividedLine = new Line(points);\n    return SubdividedLine;\n}\n\nfunction line_from_start_end_distance(start, end, distance){\n    const dist = Utilities.calculateDistance(start, end);\n    const divs = Math.round(dist / distance)+2;\n    const subdivline = line_from_start_end_divisions(start, end, divs);\n    return subdivline;\n}\n\nfunction centroid(points){\n    let rx = 0;\n    let ry = 0;\n    let rz = 0;\n    points.forEach(element => {\n        rx += element.x;\n        ry += element.y;\n        rz += element.z;\n    });\n    rx = rx / points.length;\n    ry = ry / points.length;\n    rz = rz / points.length;\n    const centroid = new Point(rx, ry, rz);\n    return centroid;\n}\n\nexport default { line_from_start_end_divisions, line_from_start_end_distance, Point, Line, centroid}","class Point {\n  constructor(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  translate(Point) {\n    this.x = this.x + Point.x;\n    this.y = this.y + Point.y;\n    this.z = this.z + Point.z;\n  }\n}\n\nexport { Point };\n","import { Point } from \"./Point.js\";\n\nclass Line{\n    constructor(points){\n        this.points = [];\n        points.forEach(p => {\n            const point = new Point(p.x, p.y, p.z);\n            this.points.push(point);\n        });\n    }\n}\n\nexport { Line }","import { Graph } from \"../Core/Graph.js\";\n\n// do a BFS Search Starting from some point\n// searches the whole graph and returns a map of which node\n// was searched from where\nasync function BFSSearch(G, node) {\n  const adj = G.get_adjacency();\n  const exploredFromMap = new Map();\n\n  const explored = [];\n  const stack = [];\n\n  // queue the first node\n  stack.push(node);\n  exploredFromMap.set(node, -1);\n\n  // search through the whole graph\n  while (stack.length > 0) {\n    const currentNode = stack.pop();\n    // add this current node to the explored list\n    explored.push(currentNode);\n    const neighbours = adj.get(currentNode);\n    for (let i = 0; i < neighbours.length; i++) {\n      const neighbour = neighbours[i];\n      if (!explored.includes(neighbour)) {\n        stack.push(neighbour);\n        exploredFromMap.set(neighbour, currentNode);\n      }\n    }\n  }\n\n  // then return the explored from map\n  return exploredFromMap;\n}\n\n// do a dijkstra Search\nasync function Dijkstra(G, Node) {\n  const adj = G.get_adjacency();\n  const Dmap = new Map();\n  // get the explored from map\n  const exploredFromMap = await BFSSearch(G, Node);\n  // then for each element in the map go through\n  // contact trace where that element came from\n  for (const n of adj.keys()) {\n    let i = 0;\n    let exploredFrom = exploredFromMap.get(n);\n    while (exploredFrom != -1) {\n      exploredFrom = exploredFromMap.get(exploredFrom);\n      i += 1;\n    }\n    Dmap.set(n, i);\n  }\n  // now return this map\n  return Dmap;\n}\n\n// This file contains basic things like\n// Graph searches and stuff\nasync function GraphDiameter(graph) {\n  // find the diameter of the graph\n  // start Dijkstra from some random node\n  let seed = Math.floor(Math.random() * graph.nodes.size);\n  let Dstart = await Dijkstra(graph, seed);\n  // iterate through all the values and then get\n  // the value that is the highest amongst the others\n  let currentDistance = -1;\n  for (const n of Dstart.keys()) {\n    const dval = Dstart.get(n);\n    if (dval > currentDistance) {\n      seed = n;\n      currentDistance = dval;\n    }\n  }\n  // then search from there to the furthest point again\n  const newStart = seed;\n  Dstart = await Dijkstra(graph, seed);\n  // repeat the thing\n  currentDistance = -1;\n  for (const n of Dstart.keys()) {\n    const dval = Dstart.get(n);\n    if (dval > currentDistance) {\n      seed = n;\n      currentDistance = dval;\n    }\n  }\n  const returnObj = {\n    start: newStart,\n    end: seed,\n    distance: currentDistance,\n  };\n  return returnObj;\n}\n\n// Select a subrgaph\nasync function SelectSubgraph(graph, nodeList) {\n  const prunedVertices = new Map();\n  const prunedEdges = new Map();\n  // set the prunded vertices list\n  nodeList.forEach((element) => {\n    // get the element from the graph and set that\n    // data element in the  prunded vertices map\n    const ndata = graph.nodes.get(element);\n    prunedVertices.set(element, ndata);\n  });\n\n  // set the pruned edges list\n  let i = 0;\n  for (const edge of graph.edges.keys()) {\n    const edgeData = graph.edges.get(edge);\n    if (nodeList.includes(edgeData.start) && nodeList.includes(edgeData.end)) {\n      prunedEdges.set(i, edgeData);\n      i += 1;\n    }\n  }\n\n  // construct a new graph that represents the new graph\n  const newGraph = await Graph.create(prunedVertices, prunedEdges);\n  return newGraph;\n}\n\n// this is where the exports happen\nexport default { GraphDiameter, Dijkstra, BFSSearch, SelectSubgraph };\n","class Graph {\n  constructor(nodes, edges) {\n    this.nodes = nodes;\n    this.edges = edges;\n    // execute Internal methods\n    // this.printData();\n  }\n\n  // test function\n  printData() {\n    const message =\n      \"This is a graph with \" +\n      this.nodes.size +\n      \" nodes and \" +\n      this.edges.size +\n      \" edges\";\n    console.log(message);\n  }\n\n  // initialize\n  async initialize() {\n    await this.constructAdjacencyList();\n  }\n\n  // new create method\n  static async create(nodes, edges) {\n    const g = new Graph(nodes, edges);\n    await g.initialize();\n    return g;\n  }\n\n  // construct the adjacency list represntation\n  async constructAdjacencyList() {\n    // I'm constructing a Graph here so some of the stuff doesnt matter\n    this.edges.forEach((edge) => {\n      // get the start point\n      const start = edge.start;\n      const end = edge.end;\n      // set the node property\n      if (this.nodes.get(start)) {\n        const relevantSNode = this.nodes.get(start);\n        relevantSNode.neighbours.push(end);\n      } else if (this.nodes.get(end)) {\n        const relevantENode = this.nodes.get(end);\n        relevantENode.neighbours.push(start);\n      }\n    });\n    // then for each node then get the unique neighbours\n    for (const key of this.nodes.keys()) {\n      const neighs = this.nodes.get(key).neighbours;\n      const new_neigh = [...new Set(neighs)];\n      const selfIndex = new_neigh.indexOf(key);\n      if (selfIndex > -1) {\n        new_neigh.splice(selfIndex, 1); // 2nd parameter means remove one item only\n      }\n      this.nodes.get(key).neighbours = new_neigh;\n    }\n  }\n\n  // add a node\n  add_node(nodeID, data) {\n    this.nodes[nodeID] = data;\n  }\n\n  // add an edge\n  add_edge(start, end, data) {\n    const newEdge = new Edge(start, end, data);\n    // this is a new edge that we add to the edges\n    this.edges.set(this.edges.size, newEdge);\n    // also add this to the node neighbours\n    const relevantNode = this.nodes.get(start);\n    relevantNode.neighbours.push(end);\n  }\n\n  // get a sparse reprentation of the graph\n  get_adjacency() {\n    const SparseMap = new Map();\n    // iterate through the node list\n    for (const key of this.nodes.keys()) {\n      SparseMap.set(key, this.nodes.get(key).neighbours);\n    }\n    return SparseMap;\n  }\n\n  // set position based on simulated array\n  apply_position_map(data) {\n    for (const n of data.keys()) {\n      this.nodes.get(n).data = { ...this.nodes.get(n).data, pos: data.get(n) };\n    }\n  }\n\n  // create new edge pos representation\n  apply_edge_pos_maps(data) {\n    for (const key of data.keys()) {\n      this.edges.get(key).data = {\n        ...this.edges.get(key).data,\n        ldata: data.get(key),\n      };\n    }\n  }\n\n  // get the edge reps\n  get_edge_lines() {\n    const lines = new Map();\n    for (const key of this.edges.keys()) {\n      const edge = this.edges.get(key).data.ldata;\n      lines.set(key, edge);\n    }\n    return lines;\n  }\n\n  // graph apply pos and edge map\n  apply_drawing_maps(layout) {\n    if (layout.pmap) {\n      this.apply_position_map(layout.pmap);\n    }\n    if (layout.emap) {\n      this.apply_edge_pos_maps(layout.emap);\n    }\n  }\n\n  // get the positon map of the graph\n  get_position_map() {\n    const returnObject = { pmap: new Map(), emap: new Map() };\n    for (const node of this.nodes.keys()) {\n      returnObject.pmap.set(node, this.nodes.get(node).data.pos);\n    }\n    for (const edge of this.edges.keys()) {\n      returnObject.emap.set(edge, this.edges.get(edge).data.ldata);\n    }\n    return returnObject;\n  }\n}\n\n// Export the graph Library\nexport { Graph };\n","export { Graph } from \"./Core/Graph.js\";\nexport {default as GraphMethods} from \"./GraphAlgorithms/GraphMethods.js\";\nexport {default as SampleData} from \"./SampleData/DataLoader.js\";\nexport {default as Constructors} from \"./HelperClasses/GraphConstructors.js\";\nexport {default as Drawing} from \"./Drawing/Drawing.js\";\nexport {default as Geometry } from \"./HelperClasses/GeometryHelpers.js\";\nexport {default as Utilities} from \"./HelperClasses/Utilities.js\";\nexport {default as threeDWrapper} from \"./Drawing/ThreeJSDrawer.js\";\nexport {default as GraphDrawer} from \"./Drawing/GraphDawer.js\";","// load up the ZKC dataset\nimport { zkc } from \"./ZKC.js\";\nimport { zkc_simulated } from \"./ZKC_simulated.js\";\nimport GraphConstructors from \"../HelperClasses/GraphConstructors.js\";\nimport { Graph } from \"../Core/Graph.js\";\nimport { Point } from \"../HelperClasses/Point.js\";\nimport { Vertex } from \"../Core/Vertex.js\";\nimport { Edge } from \"../Core/Edges.js\";\nimport Drawing from \"../Drawing/Drawing.js\";\n\nasync function LoadZKC() {\n  // load up the dataset representation\n  const data = zkc;\n  const G = await GraphConstructors.ConstructGraphNodeEdgesList(data.nodes, data.edges);\n  return G;\n}\n\nasync function LoadZKCSimulated() {\n  // make a map\n  const data = zkc_simulated;\n  const nodes = new Map();\n  const edges = new Map();\n  // set the node map\n  data.nodes.forEach((node) => {\n    const id = node.id;\n    const pos = new Point(node.px*50, 0, node.py*50);\n    const modularity = node.member;\n    const n = new Vertex({ pos: pos, size:10, info:\"Node Info\", modularity:modularity });\n    nodes.set(id, n);\n  });\n  // set the edge map\n  for (let i = 0; i < data.edges.length; i++) {\n    const edge = data.edges[i];\n    const start = edge[0];\n    const end = edge[1];\n    const e = new Edge(start, end, {});\n    edges.set(i, e);\n  }\n  // make a graph object\n  const G = await Graph.create(nodes, edges);\n  const lmap = Drawing.DrawEdgeLines(G, 10);\n  G.apply_edge_pos_maps(lmap);\n  return G;\n}\n\n// exports\nexport default { LoadZKC, LoadZKCSimulated };\n","const zkc = {\n  \"nodes\": [\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n    21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33\n  ],\n  \"edges\": [\n    [0, 1],\n    [0, 2],\n    [0, 3],\n    [0, 4],\n    [0, 5],\n    [0, 6],\n    [0, 7],\n    [0, 8],\n    [0, 10],\n    [0, 11],\n    [0, 12],\n    [0, 13],\n    [0, 17],\n    [0, 19],\n    [0, 21],\n    [0, 31],\n    [1, 2],\n    [1, 3],\n    [1, 7],\n    [1, 13],\n    [1, 17],\n    [1, 19],\n    [1, 21],\n    [1, 30],\n    [2, 3],\n    [2, 7],\n    [2, 8],\n    [2, 9],\n    [2, 13],\n    [2, 27],\n    [2, 28],\n    [2, 32],\n    [3, 7],\n    [3, 12],\n    [3, 13],\n    [4, 6],\n    [4, 10],\n    [5, 6],\n    [5, 10],\n    [5, 16],\n    [6, 16],\n    [8, 30],\n    [8, 32],\n    [8, 33],\n    [9, 33],\n    [13, 33],\n    [14, 32],\n    [14, 33],\n    [15, 32],\n    [15, 33],\n    [18, 32],\n    [18, 33],\n    [19, 33],\n    [20, 32],\n    [20, 33],\n    [22, 32],\n    [22, 33],\n    [23, 25],\n    [23, 27],\n    [23, 29],\n    [23, 32],\n    [23, 33],\n    [24, 25],\n    [24, 27],\n    [24, 31],\n    [25, 31],\n    [26, 29],\n    [26, 33],\n    [27, 33],\n    [28, 31],\n    [28, 33],\n    [29, 32],\n    [29, 33],\n    [30, 32],\n    [30, 33],\n    [31, 32],\n    [31, 33],\n    [32, 33]\n  ]\n}\n\nexport {zkc}","const zkc_simulated = {\n  nodes: [\n    { id: 0, px: 0.09083423378081436, py: 1.164162667707135, member:0 },\n    { id: 1, px: -0.5395391223661004, py: 0.8787097882002372, member:0 },\n    { id: 2, px: 0.25483951690897244, py: -0.011894166387290125, member:0 },\n    { id: 3, px: 0.5292273814873625, py: 0.8137715604013231, member:0 },\n    { id: 4, px: 0.6759740200024705, py: 2.010590015934319, member:3 },\n    { id: 5, px: 0.6648725961138767, py: 2.3765595730406712, member:3 },\n    { id: 6, px: -0.015476857282255526, py: 2.421851366492045, member:3 },\n    { id: 7, px: 0.9923183157183725, py: 0.7358251458599251, member:0 },\n    { id: 8, px: -0.6148021363450372, py: -0.03465499210385469, member:1 },\n    { id: 9, px: 0.24714516178546894, py: -1.012380550604274, member:0 },\n    { id: 10, px: 1.3293288757439443, py: 1.8641805845025743, member:3 },\n    { id: 11, px: -0.6571791278403557, py: 2.2163816367270526, member:0 },\n    { id: 12, px: 1.5181044222926994, py: 1.3282665066698078, member:0 },\n    { id: 13, px: -0.2979203330003603, py: 0.18438685313887027, member:0 },\n    { id: 14, px: -1.7502345807734376, py: -1.0935551887354324, member:1 },\n    { id: 15, px: -1.630224787934251, py: -1.5015879850995024, member:1 },\n    { id: 16, px: 0.5585243394360673, py: 3.5, member:3 },\n    { id: 17, px: -0.9776584881745712, py: 1.799718659872538, member:0 },\n    { id: 18, px: -1.385649185975611, py: -1.870388302312794, member:1 },\n    { id: 19, px: -0.9638464461397331, py: 0.24226946279518707, member:0 },\n    { id: 20, px: -1.0268125129631975, py: -2.1543990524894148, member:1 },\n    { id: 21, px: -1.3061680833745626, py: 1.527228276383933, member:0 },\n    { id: 22, px: -0.5552461198316926, py: -2.2498070887997685, member:1 },\n    { id: 23, px: 0.8262268914348979, py: -1.804253160744954, member:2 },\n    { id: 24, px: 1.9952840970427212, py: -1.0382885070400036, member:2 },\n    { id: 25, px: 1.9207660053211613, py: -0.5823795272244723, member:2 },\n    { id: 26, px: -0.1664715343791652, py: -2.6527209168204373, member:1 },\n    { id: 27, px: 0.9961959436268844, py: -1.0143754028553023, member:2 },\n    { id: 28, px: 0.6488880579857091, py: -1.024671500275854, member:2 },\n    { id: 29, px: 0.2398196340697841, py: -2.171491081802323, member:1 },\n    { id: 30, px: -1.3348117368940753, py: -0.31290471156377053, member:1 },\n    { id: 31, px: 0.6901260074375327, py: -0.2526601933356052, member:2 },\n    { id: 32, px: -0.6030949145287146, py: -1.0927507849665647, member:1 },\n    { id: 33, px: -0.3533395323856202, py: -1.1887389845640028, member:1 },\n  ],\n  edges: [\n    [0, 1],\n    [0, 2],\n    [0, 3],\n    [0, 4],\n    [0, 5],\n    [0, 6],\n    [0, 7],\n    [0, 8],\n    [0, 10],\n    [0, 11],\n    [0, 12],\n    [0, 13],\n    [0, 17],\n    [0, 19],\n    [0, 21],\n    [0, 31],\n    [1, 2],\n    [1, 3],\n    [1, 7],\n    [1, 13],\n    [1, 17],\n    [1, 19],\n    [1, 21],\n    [1, 30],\n    [2, 3],\n    [2, 7],\n    [2, 8],\n    [2, 9],\n    [2, 13],\n    [2, 27],\n    [2, 28],\n    [2, 32],\n    [3, 7],\n    [3, 12],\n    [3, 13],\n    [4, 6],\n    [4, 10],\n    [5, 6],\n    [5, 10],\n    [5, 16],\n    [6, 16],\n    [8, 30],\n    [8, 32],\n    [8, 33],\n    [9, 33],\n    [13, 33],\n    [14, 32],\n    [14, 33],\n    [15, 32],\n    [15, 33],\n    [18, 32],\n    [18, 33],\n    [19, 33],\n    [20, 32],\n    [20, 33],\n    [22, 32],\n    [22, 33],\n    [23, 25],\n    [23, 27],\n    [23, 29],\n    [23, 32],\n    [23, 33],\n    [24, 25],\n    [24, 27],\n    [24, 31],\n    [25, 31],\n    [26, 29],\n    [26, 33],\n    [27, 33],\n    [28, 31],\n    [28, 33],\n    [29, 32],\n    [29, 33],\n    [30, 32],\n    [30, 33],\n    [31, 32],\n    [31, 33],\n    [32, 33],\n  ],\n};\n\nexport { zkc_simulated };\n","import { Graph } from \"../Core/Graph.js\";\nimport { Vertex } from \"../Core/Vertex.js\";\nimport { Edge } from \"../Core/Edges.js\";\n\n// construct a graph based on an edge list etc\nasync function ConstructGraphNodeEdgesList(nodes, edges) {\n  // make a node OBJ\n  const nodeOBJ = new Map();\n  for (let i = 0; i < nodes.length; i++) {\n    const n = new Vertex(nodes[i].data);\n    nodeOBJ.set(nodes[i], n);\n  }\n  // make an edge object\n  const edgeOBJ = new Map();\n  for (let i = 0; i < edges.length; i++) {\n    const e = new Edge(edges[i][0], edges[i][1], edges[i].data);\n    edgeOBJ.set(i, e);\n  }\n  // make a graph object\n  const G = await Graph.create(nodeOBJ, edgeOBJ);\n  return G;\n}\n\nexport default { ConstructGraphNodeEdgesList };\n","class Vertex {\n    constructor(data){\n        // this data is an arbitrary thing with which I can create any object\n        this.data = { ... data};\n        // the neighbours bit is explicity set from the code outside\n        this.neighbours = [];\n    }\n}\n\nexport {Vertex}","class Edge{\n    constructor(start, end, data){\n        this.start = start;\n        this.end = end;\n        this.data = {...data};\n    }\n}\n\nexport {Edge}","import * as THREE from \"three\";\nimport { Line2 } from \"three/examples/jsm/lines/Line2.js\";\nimport { LineMaterial } from \"three/examples/jsm/lines/LineMaterial.js\";\nimport { LineGeometry } from \"three/examples/jsm/lines/LineGeometry.js\"\nimport { vertexShader } from \"../Shaders/vertexShader.glsl.js\";\nimport { fragmentShader } from \"../Shaders/fragmentShader.glsl.js\";\nimport GraphMethods from \"../GraphAlgorithms/GraphMethods.js\";\n\n// Draw the graph out as a bunch of vertices\nfunction DrawTHREEGraphVertices(Graph, bounds) {\n  const positionAttribute = [];\n  const sizes = [];\n  const colors = [];\n  const labels = [];\n  const color = new THREE.Color();\n  // process the data set\n  let i = 0;\n  for (const node of Graph.nodes.keys()) {\n    const nodeData = Graph.nodes.get(node);\n    positionAttribute.push(\n      nodeData.data.pos.x * bounds,\n      nodeData.data.pos.y * bounds,\n      nodeData.data.pos.z * bounds\n    );\n    color.setRGB(255, 255, 255);\n    color.toArray(colors, i * 3);\n    if (nodeData.data.size != undefined){\n      sizes.push(nodeData.data.size);\n    } else {\n      sizes.push(4)\n    }\n    labels.push(node);\n    i += 1;\n  }\n\n  const geometry = new THREE.BufferGeometry();\n  // geometry attribute\n  geometry.setAttribute(\n    \"position\",\n    new THREE.Float32BufferAttribute(positionAttribute, 3)\n  );\n  // color attribute\n  geometry.setAttribute(\n    \"customColor\",\n    new THREE.Float32BufferAttribute(colors, 3)\n  );\n  // size attribute\n  geometry.setAttribute(\"size\", new THREE.Float32BufferAttribute(sizes, 1));\n  // label attribute\n  geometry.setAttribute(\"label\", new THREE.Int32BufferAttribute(labels, 1));\n  geometry.name = \"THIS IS THE VERTEX GROUP\";\n\n  // example material\n  const PointMaterial = new THREE.ShaderMaterial({\n    uniforms: {\n      color: { value: new THREE.Color(0xffffff) },\n      pointTexture: {\n        value: new THREE.TextureLoader().load(\"./Textures/Square.png\"),\n      },\n      alphaTest: { value: 0.9 },\n    },\n    vertexShader: vertexShader,\n    fragmentShader: fragmentShader,\n  });\n\n  const vertices = new THREE.Points(geometry, PointMaterial);\n  return vertices;\n}\n\n// then make a thing which draws out all the edges (THICK)\nfunction DrawTHREEGraphEdgesThick(G, bounds) {\n  return DrawThickEdgesFromEdgeMap(G.edges, bounds);\n}\n\n// draw a thing to draw out all the edges from the edge map stuff\nfunction DrawThickEdgesFromEdgeMap(emap, bounds) {\n  // this is the line thing\n  const mat = new LineMaterial({\n    color: 0xffffff,\n\t\tlinewidth: 0.02, // in world units with size attenuation, pixels otherwise\n\t\tvertexColors: true,\n\n\t\t//resolution:  // to be set by renderer, eventually\n\t\tdashed: false,\n\t\talphaToCoverage: true,\n  });\n\n  const meshes = new THREE.Group();\n  for (const edge of emap.values()) {\n    const lval = edge.data.ldata;\n    const color = new THREE.Color();\n    color.setHSL( 1.0, 1.0, 1.0 );\n    const pnts = [];\n    const cols = [];\n\n    lval.points.forEach((pnt) => {\n      pnts.push(\n        pnt.x * bounds - bounds / 2,\n        pnt.y * bounds - bounds / 2,\n        pnt.z * bounds - bounds / 2\n      );\n      cols.push( color.r, color.g, color.b );\n    });\n\n    const geo = new LineGeometry();\n    geo.setPositions( pnts );\n    geo.setColors( cols );\n    const line = new Line2( geo, mat );\n    line.computeLineDistances();\n\t\tline.scale.set( 1, 1, 1 );\n    meshes.add(line);\n  }\n  return meshes;\n}\n\n// make a thing that draws out all the lines (Thin)\nfunction DrawTHREEGraphEdgesThin(G, bounds) {\n  return DrawThinEdgesFromEdgeMap(G.edges, bounds);\n}\n\n// function to draw edges from edge map\nfunction DrawThinEdgesFromEdgeMap(emap, bounds) {\n  const material = new THREE.LineBasicMaterial({\n    color: 0x90e0ef,\n  });\n  const lines = new THREE.Group();\n  for (const edge of emap.values()) {\n    const points = [];\n    // get the edge data\n    const ldata = edge.data.ldata.points;\n    ldata.forEach((element) => {\n      points.push(\n        new THREE.Vector3(\n          element.x * bounds,\n          element.y * bounds,\n          element.z * bounds\n        )\n      );\n    });\n    // then make the line thing\n    const geometry = new THREE.BufferGeometry().setFromPoints(points);\n    const line = new THREE.Line(geometry, material);\n    lines.add(line);\n  }\n  return lines;\n}\n\n// draw the cube box graph here\nfunction AddBoxBasedImaging(vertexMap, bounds) {\n  // returns a group\n  const group = new THREE.Group();\n  const material = new THREE.MeshBasicMaterial({ color: 0x0466c8 });\n  for (const node of vertexMap.keys()) {\n    const nodeData = vertexMap.get(node);\n    const geometry = new THREE.BoxGeometry(\n      nodeData.data.size,\n      nodeData.data.size,\n      nodeData.data.size\n    );\n    geometry.name = node;\n    const nodeMesh = new THREE.Mesh(geometry, material);\n    nodeMesh.position.set(\n      nodeData.data.pos.x * bounds,\n      nodeData.data.pos.y * bounds,\n      nodeData.data.pos.z * bounds\n    );\n    group.add(nodeMesh);\n  }\n  return group;\n}\n\n// Draw BoxBased imaging from a graph\nfunction DrawTHREEBoxBasedVertices(graph, bounds){\n  const Bgroup = AddBoxBasedImaging(graph.nodes, bounds);\n  return Bgroup;\n}\n\n// draw cylinders where required\nfunction AddCylinderBasedImaging(vertexMap, divisonLength) {\n  // returns a group\n  const group = new THREE.Group();\n  const material = new THREE.MeshBasicMaterial({ color: 0xffffff });\n  let radius, circumfurence, segments;\n  for (const node of vertexMap.keys()) {\n    const nodeData = vertexMap.get(node);\n    radius = nodeData.data.size;\n    circumfurence = 2 * radius * Math.PI;\n    segments = Math.ceil(circumfurence / divisonLength);\n    const geometry = new THREE.CylinderGeometry(radius, radius, 10, segments);\n    geometry.name = node;\n    const nodeMesh = new THREE.Mesh(geometry, material);\n    nodeMesh.position.set(\n      nodeData.data.pos.x,\n      nodeData.data.pos.y,\n      nodeData.data.pos.z\n    );\n    group.add(nodeMesh);\n  }\n  return group;\n}\n\n// draw the sparse graph as groups\nasync function AddInModularityBasedPointGroups(Graph, modularityList) {\n  // returns an array of groups\n  const groups = new Map();\n  const otherNodes = [];\n  for (const node of Graph.nodes.keys()) {\n    const ndata = Graph.nodes.get(node);\n    const modularity = ndata.data.modularity;\n    if (modularityList.includes(modularity)) {\n      if (groups.has(modularity)) {\n        groups.get(modularity).push(node);\n      } else {\n        groups.set(modularity, [node]);\n      }\n    } else {\n      otherNodes.push(node);\n    }\n  }\n  // then counstruct a bunch of subraphs\n  const meshGraphVertices = new Map();\n  const meshGraphEdges = new Map();\n  // make a seperate group of nodes that have less than 2 neighbours\n  console.log(\"Now started the process of vertex subdivision\");\n  for (const modularityGroup of groups.keys()) {\n    const subgraphGroup = groups.get(modularityGroup);\n    // returns an array\n    const subgraph = await GraphMethods.SelectSubgraph(\n      Graph,\n      subgraphGroup\n    );\n    // then make the vertex thing\n    const meshRep = DrawTHREEGraphVertices(subgraph, 1);\n    meshGraphVertices.set(modularityGroup, meshRep);\n    // make the edges\n    const edges = DrawSimplifiedEdges(subgraph, 0.03);\n    meshGraphEdges.set(modularityGroup, edges);\n  }\n  // now for all the vertices in the \"other\" Nodes map add in the\n  // rest of the stuff for us to play around with\n  const OtherNodes = await GraphMethods.SelectSubgraph(Graph, otherNodes);\n  const LeafVertices = DrawTHREEGraphVertices(OtherNodes, 1);\n  const ROBJ = {\n    vertices: meshGraphVertices,\n    edges: meshGraphEdges,\n    leafs: LeafVertices,\n  };\n  return ROBJ;\n}\n\nfunction DrawSimplifiedEdges(G, amount) {\n  const lineGroup = new THREE.Group();\n  const material = new THREE.LineBasicMaterial({ color: 0x90e0ef });\n  for (const edge of G.edges.values()) {\n    if(Math.random()<=amount){\n      const start = G.nodes.get(edge.start).data.pos;\n      const end = G.nodes.get(edge.end).data.pos;\n      const points = [];\n      points.push(new THREE.Vector3(start.x, start.y, start.z));\n      points.push(new THREE.Vector3(end.x, end.y, end.z));\n      const geometry = new THREE.BufferGeometry().setFromPoints(points);\n      const line = new THREE.Line(geometry, material);\n      lineGroup.add(line);\n    }\n  }\n  return lineGroup;\n}\n\nfunction ChangeTheVertexColours(vertices, indexArray, color){\n  let Attrib = vertices.geometry.attributes;\n  let k = 0;\n  indexArray.forEach((node) => {\n    k = node * 3;\n    Attrib.customColor.array[k] = color.r;\n    Attrib.customColor.array[k + 1] = color.g;\n    Attrib.customColor.array[k + 2] = color.b;\n  })\n  Attrib.customColor.needsUpdate =true;  \n}\n\nfunction ResetVertexColors(vertices){\n  let Attrib = vertices.geometry.attributes;\n  let k = 0;\n  for (let i = 0; i < Attrib.customColor.count; i++) {\n    k = i*3;\n    Attrib.customColor.array[k] = 100;\n    Attrib.customColor.array[k + 1] = 237;\n    Attrib.customColor.array[k + 2] = 146;\n  }\n  Attrib.customColor.needsUpdate = true;\n}\n\nexport default {\n  DrawTHREEGraphVertices,\n  DrawTHREEGraphEdgesThick,\n  DrawTHREEGraphEdgesThin,\n  AddBoxBasedImaging,\n  AddInModularityBasedPointGroups,\n  DrawThinEdgesFromEdgeMap,\n  DrawThickEdgesFromEdgeMap,\n  AddCylinderBasedImaging,\n  DrawSimplifiedEdges,\n  ChangeTheVertexColours,\n  ResetVertexColors,\n  DrawTHREEBoxBasedVertices\n};\n","const vertexShader = `\nattribute float size;\nattribute vec3 customColor;\n\nvarying vec3 vColor;\n\nvoid main() {\n    vColor = customColor;\n    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n    gl_PointSize = size * ( 300.0 / -mvPosition.z );\n    gl_Position = projectionMatrix * mvPosition;\n}\n`\n\nexport {vertexShader};","const fragmentShader = `\nuniform vec3 color;\nuniform sampler2D pointTexture;\nuniform float alphaTest;\n\nvarying vec3 vColor;\n\nvoid main() {\n    gl_FragColor = vec4( color * vColor, 1.0 );\n    gl_FragColor = gl_FragColor * texture2D( pointTexture, gl_PointCoord );\n    if ( gl_FragColor.a < alphaTest ) discard;\n}\n`;\n\nexport { fragmentShader };\n","import * as THREE from \"three\";\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\nimport PGLTHREEWrapper from \"./ThreeJSDrawer.js\";\n\n// this is the 3d graph drawing class with three js\nclass GraphDrawer3d {\n  constructor(GraphDrawerOptions3d, graphs) {\n    this.canvas = GraphDrawerOptions3d.canvas;\n    this.width = GraphDrawerOptions3d.width;\n    this.height = GraphDrawerOptions3d.height;\n    this.geometryMap = new Map();\n    this.materialMap = new Map();\n    this.meshMap = new Map();\n    this.controls;\n    this.renderer;\n    this.camera;\n    this.scene;\n    // bounds is a global parameter that we change (think about this as scale)\n    this.bound = GraphDrawerOptions3d.bounds;\n    // graph map is the hash map that holds all the\n    // graphs that we are working with together\n    this.graphs = new Map();\n    // add the default graph to the graph map\n    for (let i = 0; i < graphs.length; i++) {\n      const g = graphs[i];\n      this.graphs.set(i, g)\n    }\n  }\n\n  async init() {\n    const t1 = performance.now();\n\n    this.camera = new THREE.PerspectiveCamera();\n\n    // start up a new scene\n    this.scene = new THREE.Scene();\n\n    // set up a renderer\n    this.renderer = new THREE.WebGLRenderer({canvas:this.canvas, antialias:true});\n    this.renderer.setSize(this.width, this.height);\n    this.renderer.setClearColor(0xff00ff, 0);\n\n    // add in a light\n    this.scene.add(new THREE.AmbientLight(0xffffff));\n    // add a spotlight \n    const DirectionalLight = new THREE.DirectionalLight(0xffffff, 1);\n    DirectionalLight.position.set(0, 10, 0);\n    this.scene.add(DirectionalLight);\n\n\n    // set up the control system\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.camera.position.set(0, 100, 100);\n    this.controls.autoRotate = true;\n    this.controls.maxPolarAngle = Math.PI * 0.5;\n    this.camera.enableDamping = true;\n    this.controls.maxDistance = 1000;\n    this.controls.minDistance = 10;\n    this.controls.update();\n\n    // add in the graph that we wanted this.graphs.get('ProvidedGraph')\n    for (const graph of this.graphs.keys()) {\n      const GeoGraph = PGLTHREEWrapper.DrawTHREEBoxBasedVertices(this.graphs.get(graph), this.bound);\n      this.scene.add(GeoGraph);\n      const ThickEdges = PGLTHREEWrapper.DrawTHREEGraphEdgesThick(this.graphs.get(graph), this.bound);\n      this.scene.add(ThickEdges);\n    }\n\n    // edges \n\n\n    // finally print out that the initialization has finished\n    const t2 = performance.now();\n    console.log(\"initialization has finished\");\n    console.log(`Time to initialize ${t2 - t1} milliseconds`);\n  }\n\n  // this stuff renders out one specific instances\n  rendercall() {\n    // this is the render draw call\n    this.renderer.render(this.scene, this.camera);\n    this.controls.update();\n  }\n}\n\n\nexport default {\n    GraphDrawer3d,\n}"],"names":[],"version":3,"file":"pgl.js.map"}